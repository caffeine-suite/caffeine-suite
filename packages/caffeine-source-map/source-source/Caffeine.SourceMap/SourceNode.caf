import &ArtStandardLib,  &ArtClassSystem, &ArtBinary, &Lib, {} &SourceMapGenerator

class SourceNode extends BaseClass

  @property :sourceIndex :children :props

  constructor: (@sourceIndex, @children)->
    @_props = null
    @_flattenedChildren = null

  @getter
    inspectedObjects: -> {} @sourceIndex, @props, children: toInspectedObjects @children

  @getter
    flattenedChildren: -> @_flattenedChildren ?= compactFlatten @children
    mergedProps: ->
      out = merge @_props if @_props
      each child in @flattenedChildren
        if child extract mergedProps
          out = if out
            deepMerge out, mergedProps
          else
            mergedProps

      out

  withProps: (@_props) -> @

  generate: (source, options) ->
    options extract sourceFile, sourceRoot, inlineMap
    {js, sourceMap} = out =
      new SourceMapGenerator source, options
      .add @

    if inlineMap
      {}
        js:
          []
            js
            "" //# sourceMappingURL=#{binary(sourceMap).toDataUri :application/json, true}

            if sourceFile
              "" //# sourceURL=#{getSourceMapPath sourceRoot, sourceFile}

            '' # end with a newline

          .join "\n"

    else if options.sourceMap
      {}
        js.map: sourceMap
        js:
          []
            js

            "" //# sourceMappingURL=#{getRelativeSourceMapPath sourceRoot, getOutputFileName sourceFile, :.js.map}
            '' # end with a newline

          .join "\n"

    else {} js

  toString: (output = js: '') ->
    each child in @flattenedChildren
      if child is String then output.js += child
      else child.toString output
    output.js
