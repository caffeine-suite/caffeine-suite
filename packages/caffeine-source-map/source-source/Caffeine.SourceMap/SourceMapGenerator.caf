import &ArtStandardLib, &ArtClassSystem, &CaffeineEight, &Base64, &Lib

# https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit

class SourceMapGenerator extends BaseClass

  @property
    :source
    :sourceFile
    :generatedFile
    :sourceRoot

  @getter
    :js
    :mappings
    :lastSourceLine
    :lastSourceColumn
    :lastGeneratedColumn
    :nextGeneratedColumn
    status: ->
      {}
        @lastSourceLine
        @lastSourceColumn
        @lastGeneratedColumn
        @nextGeneratedColumn
        @mappings

    sourceMap:  -> JSON.stringify @rawSourceMap, null, "  "
    sourceFile: -> getSourceMapPath @_sourceRoot, @_sourceFile
    file: -> getOutputFileName @sourceFile, :.js

    rawSourceMap: ->
      merge
        {}
          version:        3
          file:           getRelativeSourceMapPath @sourceRoot, @file
          sourceRoot:     getRelativePathToSourceRoot @sourceRoot, @file
          sources:        [] getRelativePathToSourceFile @sourceRoot, @sourceFile
          # sourceContent:  [] @source
          names:          []
          @mappings # Example: "" A,AAAB;;ABCDE;


        # not currently supported:
        #   sourceRoot:       ""
        #   names:            :src :maps :are :fun

    inspectedObjects: -> @rawSourceMap

  constructor: (@source, options) ->
    @sourceFile     = options.sourceFile
    @generatedFile  = options.generatedFile
    @sourceRoot     = options.sourceRoot

    @_js = ""
    @_mappings = ""

    @_lastSourceLine =
    @_lastSourceColumn =
    @_lastGeneratedColumn =
    @_nextGeneratedColumn = 0
    @_firstSegment = true
    @_lastSourceIndex = -1
    @_currentSourceIndex = 0

    @_sourceLineColumnMap = new SourceLineColumnMap @source

  addLine: ->
    @_mappings += ";"
    @_lastGeneratedColumn = 0
    @_firstSegment = true

  reusableColLine = {}
  addSegment: ->
    if @_currentSourceIndex > @_lastSourceIndex
      @_lastSourceIndex = @_currentSourceIndex

      {line, column} = @_sourceLineColumnMap.getLineColumn @_currentSourceIndex, reusableColLine

      if @_firstSegment && column > 0
        @_firstSegment = false
        @_mappings +=
          e0 = encodeVlq 0
          + :A + e0 + e0

      out =
        encodeVlq @_nextGeneratedColumn - @_lastGeneratedColumn # generated column
        + :A                                                    # Sources, with only one source, always a VLQ-0
        + encodeVlq line                - @_lastSourceLine      # source line
        + encodeVlq column              - @_lastSourceColumn    # source column

      @_lastGeneratedColumn = @_nextGeneratedColumn
      @_lastSourceLine      = line
      @_lastSourceColumn    = column

      if @_firstSegment
        @_firstSegment = false
      else
        @_mappings += ","

      @_mappings += out

  advance: (generatedString) ->
    return unless generatedString.length > 0
    @addSegment()
    index = -1
    lineAdded = false
    lastStartIndex = null
    while 0 <= index = generatedString.indexOf "\n", lastStartIndex = index + 1
      lineAdded = true
      @addLine()

    if lineAdded
      @_nextGeneratedColumn = generatedString.length - lastStartIndex
    else
      @_nextGeneratedColumn += generatedString.length

  add: (output) ->
    switch
    when output is String
      @_js += output
      @advance output

    when output?.children
      {sourceIndex, children} = output
      @_currentSourceIndex = sourceIndex if sourceIndex? && sourceIndex > @_currentSourceIndex
      @add children

    when output is Array
      each child in output when child?
        @add child

    @
