let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {let ArtFoundation = require('art-foundation'), BabelBridge = require('babel-bridge'), SemanticTree = require('../SemanticTree'), Extensions, ObjectStn; ({Extensions, ObjectStn} = Caf.i(["Extensions", "ObjectStn"], [ArtFoundation, BabelBridge, SemanticTree, global])); return function() {this.rule({singleOrMultilineImplicitObject: ["multilineImplicitObject", "object"]}); this.rule({object: [{pattern: "openCurly_ props:propertyList _closeCurly"}, {pattern: "props:implicitObject"}, {pattern: "'{}' _? props:propertyList"}, {pattern: "'{}' _? props:objectLiteralBlock"}, {pattern: "'{}'"}], multilineImplicitObject: {pattern: "!implicitObjectWithTwoOrMorePropsOnOneLine valuePropWithComplexExpression multilineImplicitObjectExtension+"}}, {getStn: function() {let children; children = Caf.e(this.getMatchStns(), [], (m, k, into) => {return into.push((m instanceof ObjectStn.class) ? m.children : m);}); return ObjectStn(children);}}); this.rule({multilineImplicitObjectExtension: "/( *\n)+/ !implicitObjectWithTwoOrMorePropsOnOneLine valuePropWithComplexExpression", objectLiteralBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock({rule: "singleOrMultilineImplicitObject"}), implicitObject: {pattern: "propertyList"}, implicitObjectWithTwoOrMorePropsOnOneLine: [{pattern: "literalProp _ propertyList"}, {pattern: "valueProp _comma_ propertyList"}], propertyList: [{pattern: "valueProp _comma_ propertyList"}, {pattern: "literalProp _ propertyList"}, {pattern: "valuePropWithComplexExpression"}]}); this.rule({literalProp: "propName _colon_ propValue:literal", valueProp: "propName _colon_ propValue:expression", valuePropWithComplexExpression: [{pattern: "propName _colon_ propValue:complexExpression"}, {pattern: "propName _colon_ propValue:propertyValueBlock"}]}, {name: "literalObjectProperty", stnFactory: "ObjectPropValueStn"}); this.rule({propertyValueBlock: "rValueBlock", propName: {pattern: "computedPropName"}, computedPropName: {pattern: "openBracket_ expression _closeBracket", stnFactory: "AccessorStn"}}); this.rule({stringLiteralPropNameTail: ["_ /:/ !unquotedString", "/:/"]}); return this.rule({propName: [{pattern: "!/then\\s/ str:identifier &_colon_"}, {pattern: "!/then\\s/ str:unquotedString &/:/"}, {pattern: "str:stringLiteral &stringLiteralPropNameTail"}]}, {stnFactory: "ObjectPropNameStn"});};});