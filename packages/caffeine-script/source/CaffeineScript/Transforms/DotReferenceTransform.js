"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["Error"], [global, require('../StandardImport'), require('caffeine-eight')], (Error) => {let depthFirstTransformR, depthFirstTransform; depthFirstTransformR = function(stn, transform) {let newChildren, children, e, from, into, to, i1, temp; return (() => {try {newChildren = null; from = children = stn.children; into = from; if (from != null) {to = from.length; i1 = 0; while (i1 < to) {let child, i, newChild; child = from[i1]; i = i1; if (child !== (newChild = depthFirstTransformR(child, transform))) {newChildren != null ? newChildren : newChildren = children.slice(); newChild.props.label = child.label; newChildren[i] = newChild;}; i1++;};}; into; return transform(stn.withChildren(newChildren || children));} catch (error) {e = error; ((temp = e.stn) != null ? temp : e.stn = stn); return (() => {throw e;})();};})();}; depthFirstTransform = function(stn, transform) {let e, ce; return (() => {try {return depthFirstTransformR(stn, transform);} catch (error) {e = error; return e.stn ? (ce = e.stn.parseTreeNode.parser.generateCompileError({failureIndex: e.stn.sourceOffset, errorType: "Transform", message: e.message, info: e.info}), ce.stack = e.stack, (() => {throw ce;})()) : (() => {throw e;})();};})();}; return function(stn) {return depthFirstTransform(stn, (stn) => {if (stn.type === "DotReference") {throw new Error("DotReference is not supported yet.");}; return stn;});};});});
//# sourceMappingURL=DotReferenceTransform.js.map
