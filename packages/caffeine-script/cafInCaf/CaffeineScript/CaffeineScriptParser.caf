import &StandardImport, &BabelBridge, &CafParseNodeBaseClass

##
  Eventualy I want all AstNodes to respond to:

  initially we should do:
    toJsExpression - no need for parens because it is either inside brackets already or the end of an expression.
    toStatement - no return-value needed; generate the nicest JS you can.

  eventually we should also do:
    toJsExpressionInList - add parens if a following comma would confusing things
    toJsExpression(operatorBefore, operatorAfter) - add parens if needed to ensure operator precidence

class CaffeineScriptParser extends Parser
  @nodeBaseClass: &CafParseNodeBaseClass

  each mod in &Rules.modules
    if isFunction mod
      mod.call @
    else
      @rule mod

  mixedIndentationRegexp = /(^|\n)( +\t|\t+ )/
  tabIndentationRegexp = /(^|\n)\t/
  spaceIndentationRegexp = /(^|\n) /

  hasMixedIndentation: (source) ->
    mixedIndentationRegexp.test source
    || (tabIndentationRegexp.test(source) && spaceIndentationRegexp.test source)

  normalizeIndentation: (source) ->
    if @hasMixedIndentation source
      e = new Error "file must only contain spaces OR tabs for indentation, not both"
      e.failureIndex = 0 # make it look like a parse-error (TODO: HACK)
      throw e


    if tabIndentationRegexp.test source
      source.replace /\t/g, ' '
    else
      source

  parse: (source, options) ->
    super
      @normalizeIndentation source
      options
