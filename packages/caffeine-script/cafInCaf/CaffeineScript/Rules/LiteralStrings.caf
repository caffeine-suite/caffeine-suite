import &ArtFoundation, &BabelBridge, &SemanticTree, &Lib

dqStringStartRegexp = /// " ( [^\\"\#] | \\[\s\S] | \#(?!\{) )* ///

##
  Notes:

    1) generate ES6 interpolations: `foo#{bar}`
    2) unparsedBlock needs to be interpolated (create a new block-type that starts the sub-parse on rule: stringBlock)
    3) "" EOL needs interpolation
    4) #tripples """ and ''' need interpolation

->

  @rule
    stringLiteral:
      {}
        pattern: '/""/ tripple:/"/? &/ +[^ \\n]| *\\n/ stringBlock'
        getStn: ->
          ret = super

          unless @tripple
            if ret.type == "String"
              ret.compactNewLines()
            else
              each child in ret.children when child.type == "String"
                child.compactNewLines()

          peek ret.children
          || ret
          .trimRight?()

          ret

      {}
        pattern: "/''/ tripple:/'/? &/ +[^ \\n]| *\\n/ unparsedBlock"
        getStn: ->
          ret = StringStn value: @unparsedBlock.toString()
          ret.compactNewLines() unless @tripple
          ret

    stringBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock rule: "stringBlockBody"

  @rule
    stringLiteral:
      "dqStringStart mid:dqStringMiddle interpolation:dqStringInterpolation? dqStringEnd"

    stringBlockBody: "/[ \\n]*/ mid:blockStringMiddle interpolation:blockStringInterpolation?"

    {}
      getStnChildren: (appendTo = [])->
        appendTo.push StringStn value: @mid.toString() if @mid.matchLength > 0
        @interpolation?.getStnChildren appendTo
        appendTo

      getStn: ->
        if @interpolation
          InterpolatedStringStn @getStnChildren()
        else
          StringStn value: @mid.toString()

  @rule
    stringLiteral:
      "/'/ string:/([^\\']|\\.)*/ /'/"
      "':' string:unquotedString"

    {}
      getStn: -> StringStn value: @string.toString()

  @rule
    dqStringStart:          /"/

    interpolationStart:     /\#\{/
    interpolationEnd:       /\}/

  @rule
    dqStringMiddle:         /// ( [^"\\#]    | \\. | \#(?!\{) )* ///
    blockStringMiddle:      /// ( [^\\#]     | \\.     | \#(?!\{) )* ///
    {}
      toEscapedQuotes: (quote) -> deescapeSpaces escapeUnescaped @toString(), quote

      toEscapedBackTicks:    -> deescapeSpaces escapeUnescaped @toString(), '`'
      toEscapedDoubleQuotes: -> deescapeSpaces escapeUnescaped @toString(), '"'

  @rule
    dqStringInterpolation:    "interpolationStart expression interpolationEnd mid:dqStringMiddle interpolation:dqStringInterpolation?"
    blockStringInterpolation: "interpolationStart expression interpolationEnd mid:blockStringMiddle interpolation:blockStringInterpolation?"
    {}
      getStnChildren: (appendTo = [])->
        appendTo.push @expression.getStn()
        appendTo.push StringStn value: @mid.toString() if @mid.matchLength > 0
        @interpolation?.getStnChildren appendTo
        appendTo

  @rule
    dqStringEnd: /"/
