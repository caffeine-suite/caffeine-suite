import &StandardImport, &BabelBridge, &SemanticTree, &Lib

~>
  @rule
    doubleQuote:            /"/
    singleQuote:            /'/

    interpolationStart:     /\#\{/
    interpolationEnd:       /\}/

    dqStringMiddle:         /// ( [^"\\#]    | \\. | \#(?!\{) )* ///
    sqStringMiddle:         /// ( [^'\\#]    | \\. | \#(?!\{) )* ///
    blockStringMiddle:      /// ( [^\\#]     | \\.     | \#(?!\{) )* ///

  @rule
    stringLiteral:
      {}
        pattern: '/""/ tripple:/"/? &/ +[^ \\n]| *\\n/ stringBlock'
        getStn: ~>
          ret = @stringBlock.getStn()
          ret.compactNewLines() unless @tripple
          ret.trimRight?()
          ret

      {}
        pattern: "/''/ tripple:/'/? &/ +[^ \\n]| *\\n/ unparsedBlock"
        getStn: ~>
          ret = StringStn value: @unparsedBlock.toString()
          ret.compactNewLines() unless @tripple
          ret

      {}
        pattern: "':' string:unquotedString"
        getStn: ~>
          StringStn value: @string.toString()
          .compactNewLines true, true

    stringBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock rule: "stringBlockBody"

  @rule
    stringLiteral:
      "bracketStart:doubleQuote mid:dqStringMiddle interpolation:dqStringInterpolation? doubleQuote"
      "bracketStart:singleQuote mid:sqStringMiddle interpolation:sqStringInterpolation? singleQuote"

    stringBlockBody: "/[ \\n]*/ mid:blockStringMiddle interpolation:blockStringInterpolation?"

    {}
      getStnChildren: (appendTo = [])~>
        appendTo.push StringStn value: @mid.toString() if @mid.matchLength > 0
        @interpolation?.getStnChildren appendTo
        appendTo

      getStn: ~>
        ret = if @interpolation
          InterpolatedStringStn @getStnChildren()
        else
          StringStn value: @mid.toString()

        if @bracketStart
          ret.compactNewLines true, true
        ret

  @rule
    interpolation:
      "interpolationStart expression interpolationEnd"
      "interpolationStart expression:rValueBlock _end? interpolationEnd"

  @rule
    dqStringInterpolation:    "interpolation mid:dqStringMiddle interpolationContinues:dqStringInterpolation?"
    sqStringInterpolation:    "interpolation mid:sqStringMiddle interpolationContinues:sqStringInterpolation?"
    blockStringInterpolation: "interpolation mid:blockStringMiddle interpolationContinues:blockStringInterpolation?"
    {}
      getStnChildren: (appendTo = [])~>
        appendTo.push @interpolation.expression.getStn()
        appendTo.push StringStn value: @mid.toString() if @mid.matchLength > 0
        @interpolationContinues?.getStnChildren appendTo
        appendTo
