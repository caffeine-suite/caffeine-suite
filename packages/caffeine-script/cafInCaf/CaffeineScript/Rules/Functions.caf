|caffeine-script
import &ArtFoundation, &BabelBridge

getPropertySetters = (node, list = []) ->
  if node
    if prop = node.shouldSetProperty?()
      list.push prop
    else
      each match in node.matches
        getPropertySetters match, list
  list

->
  @rule
    functionDefinition:
      pattern: "args:argsDefinition? _arrow_ body:functionDefinitionBodyBlock?"
    {}
      stnFactory: :FunctionDefinitionStn
      stnProps: -> bound: @_arrow_.text.match /=>/

  @rule
    functionDefinitionBodyBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock()

  @rule
    argsDefinition:
      pattern: "openParen_ argDefList? _closeParen"
    {}
      stnFactory: :FunctionDefinitionArgsStn

  @rule
    argDefList:
      {} pattern: "argDef _comma_ argDefList"
      {} pattern: "argDef _ argDefList"
      {} pattern: "argDef"

    argDef:
      pattern: "at:/@/? identifier argIdentifierExtension?"
      stnFactory: "FunctionDefinitionArgStn"
      stnProps: -> rest: !!@argIdentifierExtension?.etc, assignThisProperty: !!@at

    argIdentifierExtension:
      :defaultValue
      :etc

    defaultValue:
      pattern: "_equals_ expression"

  @rule
    etc: "'...'"

  @rule superFunctionInvocation:
    {} pattern: "openParen_ valueList? _closeParen"
    {} pattern: "_? complexExpression"
    {} pattern: "_? valueListBlock"

  @rule
    functionInvocation:
      {} pattern: "existanceTest:questionMark? openParen_ valueList? _closeParen"
      {} pattern: "existanceTest:questionMark? _? complexExpression"
      {} pattern: "existanceTest:questionMark? _? valueListBlock"
    {}
      stnFactory: "FunctionInvocationStn"
      stnExtension: true
      stnProps: -> existanceTest: !!@existanceTest
