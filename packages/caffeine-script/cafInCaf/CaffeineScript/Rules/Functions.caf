import &StandardImport, &BabelBridge

getPropertySetters = (node, list = []) ~>
  if node
    if prop = node.shouldSetProperty?()
      list.push prop
    else
      each match in node.matches
        getPropertySetters match, list
  list

->
  @rule
    functionDefinition:
      pattern: "args:argsDefinition? _arrow_ body:functionDefinitionBodyBlock?"
    {}
      stnFactory: :FunctionDefinitionStn
      stnProps: ~>
        bound: switch @_arrow_.text.match(/(=>|~>|->)/)[0]
          when "=>" then true
          when "~>" then false
          when "->" then "auto"
          else throw new Error

  @rule
    functionDefinitionBodyBlock: Extensions.IndentBlocks.getPropsToSubparseToEolAndBlock()

  @rule
    argsDefinition:
      "openParen_ argDefList? _closeParen"
    {}
      stnFactory: :FunctionDefinitionArgsStn

  @rule
    argDefList:
      "argDef _comma_ argDefList"
      "argDef _ argDefList"
      "argDef"

  @rule
    argDef:
      "at:/@/? target:identifier argIdentifierExtension?"
      "target:destructuringTarget argIdentifierExtension?"
    {}
      stnFactory: "FunctionDefinitionArgStn"
      stnProps: ~> rest: !!@argIdentifierExtension?.ellipsis, assignThisProperty: !!@at

  @rule
    argIdentifierExtension:
      :defaultValue
      :ellipsis

    defaultValue:
      pattern: "_equals_ expression"

  @rule superFunctionInvocation:
    "openParen_ simpleValueList? _closeParen"
    "_? valueList"

  @rule
    functionInvocation:
      "existanceTest:questionMark? openParen_ values:simpleValueList? _closeParen"
      "existanceTest:questionMark? !/[-+]/ _? values:valueList"
    {}
      stnFactory: "FunctionInvocationStn"
      stnExtension: true
      stnProps: ~> existanceTest: !!@existanceTest
      stnChildren: ~> @values?.getStn()
