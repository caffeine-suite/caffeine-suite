##
  Note that "_" in rule-names is used consistently to indicate one or more spaces will be matched before or after the rule or both.
  Most rules (rules with no "_" suffix or prefix) do not consume spaces before or after themselves.

->
  @rule
    _equals_:       /\ *= */
    _colon_:        /: *| +:( +|(?=\n))/
    # _colon_:        /\ *: */
    _comma_:        /\ *, *\n*/
    _arrow_:        /\ *[-~=]> */

    openParen_:     /\( */
    _closeParen:    /\ *\)/

    openBracket_:   /\[ *(\n*(?!\s))?/
    _closeBracket:  /[ \n]*\]/

    openCurly_:     /\{ */
    _closeCurly:    /\ *\}/
    _else:          /(( *\n)+| +)else/
    ellipsis:       "'...'" # etc

    reservedWord:
      ///
        (
        # forbidden by javascript, but not used by Caf
        for | yes | no | on | off |

        global | require | module | eval | this |

        true | false |

        super |

        instanceof |

        delete |

        import |

        throw |

        return |

        break |

        into | returning |

        with | do |

        switch |

        when |

        if | until |

        try | catch |

        while | unless |

        then | else |

        and | or | is | isnt |

        in | from |

        not
        )

        \b

    identifier:
      ///
        (?!\d)
        ( (?!\s) [$\w\u007f-\uffff] )+

      stnFactory: :IdentifierStn
      stnProps: ~> identifier: @toString()

    # identifiers plus "-" and "/"
    pathedRequire:
      ///
        ( (?!\s) [-\/$\w\u007f-\uffff] )+

    ##
      SBD Feb2017: still debating exactly what should be included in unquoted strings

      - definitly not: space, comma, [], (), {}
      - could, could not: '', "", ``
      - questionables: |, \
    unquotedString:     /[-~!@\#$%^&*_+=|\\<>?\/.$\w\u007f-\uffff]+/

    unaryTailOperator:  /// \?
    unaryOperator_:
      ///
        ([!~] | not\b | delete\b) \ *

        |

        -(?![ :])

    binaryOperator:
      ///

        # js logic
        && | \|\| | &(?=\s) | \| | \^ |

        # cs logic
        \? |

        # cs english logic
        # is && isnt are no longer supported - in anticipation of probable semantic change to typeof-replacements
        ((and | or | in | is | isnt | instanceof)\b) |

        # shift
        << | >>> | >> |

        # comparison
        == | != | <= | >= | < | > |

        # cs math
        // | %% | \*\* |

        # js math
        [-+*/%]

    assignmentOperator: assignmentOperator =
      ///
        ( # copy of binaryOperatorRegEx EXCEPT comparison operators
          # js logic
          && | \|\| | & | \| | \^ |

          # cs logic
          \? |

          # cs english logic
          ((and | or | isnt | is | in)\b) |

          # shift
          << | >>> | >> |

          # comparison
          # == | != | <= | >= | < | > |

          # cs math
          // | %% | \*\* |

          # js math
          [-+*/%]
        )?
        =
        # \ *

    # _assignmentOperator_: /// \ *#{assignmentOperator.source}\ *

    new: /new\b/
    throw: /throw\b/
    with: /with\b/
    when: /when\b/
    into: /(into|returning)\b/
    withOrDo: /(with|do)\b/

  @rule
    comprehensionOutputType: /(object|array|reduce|each|find)\b/
    comprehensionIterationType: /(from|in)\b/

    # comprehensionIterationType: /from( +(object|array|iter))?/
    dot: /\./
    questionMark: /\?/
    {} stnFactory: :SemanticTokenStn
