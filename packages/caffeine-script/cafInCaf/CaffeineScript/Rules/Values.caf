import &StandardImport, &BabelBridge

->
  @rule
    value: "simpleValue valueExtension*"

  @rule
    valueExtension: :dotAccessor :bracketAccessor :functionInvocation :blockValueExtension
    simpleValue:
      :require
      :tagMacro
      :globalIdentifier
      :this
      :thisProperty
      :literal
      :super
      :unqualifiedIdentifier
      :parentheticalExpression

  @rule
    parentheticalExpression: "'(' _? expression _? ')'"

  @rule
    require:
      pattern:    "/&/ pathedRequire"
      stnProps:   ~> require: @pathedRequire.text
      stnFactory: :RequireStn

  @rule
    unqualifiedIdentifier:
      pattern: "!reservedWord identifierReference assignmentExtension?"

  @rule
    identifierReference:
      pattern:    :identifier
      stnFactory: :ReferenceStn

  @rule
    this:         "/@/ !identifier"
    thisProperty: "/@/ identifier assignmentExtension?"
    {} stnFactory: :ThisStn

  @rule
    globalIdentifier:
      pattern: /(global|require|module|eval)\b/
      stnFactory: :GlobalIdentifierStn
      stnProps: ~> identifier: @text

  @rule
    super:
      pattern:    "/super\\b/ superFunctionInvocation"
      stnFactory: :SuperStn

  @rule
    super:
      pattern:    /super\b/
      stnFactory: :SuperStn
      stnProps:   passArguments: true

  @rule
    assignedValue: :complexExpression :rValueBlock

  @rule
    assignmentExtension:
      "assignmentOperator:_assignmentOperator_ _end? complexExpression"
      "assignmentOperator:_assignmentOperator_ rValueBlock"
    {}
      stnFactory:   :AssignmentStn
      stnExtension: true
      stnProps: ~>
        rawOp = @assignmentOperator.toString()
        operator: (match = rawOp.match /(\S*)=/) && match[1]

  @rule
    blockValueExtension: "_? blockValueExtensionBlock"
    blockValueExtensionBlock: Extensions.IndentBlocks.getPropsToSubparseBlock rule: "blockValueExtensionSubparse"
    blockValueExtensionSubparse:
      "lineStartComment* &dotOrQuestionDot valueExtension+ binaryOperatorSequenceExtension? newLineStatementExtension* end"
      "lineStartComment* lineStartBinaryOperatorAndExpression newLineStatementExtension* end"

    dotOrQuestionDot: /\??\./
