import &StandardImport, &BabelBridge

->
  @rule
    value: "simpleValue valueExtension*"

  @rule
    valueExtension: :dotAccessor :bracketAccessor :functionInvocation :blockValueExtension
    simpleValue:
      :require
      :tagMacro
      :globalIdentifier
      :this
      :thisProperty
      :literal
      :super
      :unqualifiedIdentifier
      :parentheticalExpression

  @rule
    parentheticalExpression: "'(' _? expression _? ')'"

  @rule
    unqualifiedIdentifier:
      pattern: "!reservedWord identifierReference assignmentExtension?"

  @rule
    identifierReference:
      pattern:    :identifier
      stnFactory: :ReferenceStn

  @rule
    this:         "/@/ !identifier"
    thisProperty: "/@/ identifier assignmentExtension?"
    {} stnFactory: :ThisStn

  @rule
    globalIdentifier:
      pattern: /(global|require|module|eval|this)\b/
      stnFactory: :GlobalIdentifierStn
      stnProps: ~> identifier: @text

  @rule
    super:
      pattern:    "/super\\b/ superFunctionInvocation"
      stnFactory: :SuperStn

  @rule
    super:
      pattern:    /super\b/
      stnFactory: :SuperStn
      stnProps:   passArguments: true

  @rule
    blockValueExtension: "_? blockValueExtensionBlock"
    blockValueExtensionBlock: Extensions.IndentBlocks.getPropsToSubparseBlock rule: "blockValueExtensionSubparse"
    blockValueExtensionSubparse:
      "lineStartComment* &dotOrQuestionDot valueExtension+ binaryOperatorSequenceExtension? newLineStatementExtension* end"
      "lineStartComment* lineStartBinaryOperatorAndExpression newLineStatementExtension* end"

    dotOrQuestionDot: /\??\./

  @rule
    requiredValue:
      "_? _end? implicitArrayOrExpression"
      "_? rValueBlock"

    rValueBlock: Extensions.IndentBlocks.getPropsToSubparseBlock rule: "rValueBlockSubParse"
    rValueBlockSubParse:
      pattern: "root"
      getStn: ~>
        {statements} = @root
        if statements.length == 1
          statements[0].getStn()
        else
          &StnRegistry.ArrayStn @root.getMatchStns()
