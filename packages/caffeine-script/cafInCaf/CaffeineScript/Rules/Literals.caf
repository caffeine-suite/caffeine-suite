import &StandardImport

->
  @rule
    literal:
      :nullLiteral
      :boolLiteral
      :numberLiteral
      :stringLiteral
      :regExpLiteral
      :bracketedObject
      :brackedArray

  @rule
    boolLiteral:   :true :false
    nullLiteral:   "/null/"
    numberLiteral:
      ///
      (
        # decimal number
        [-+]?
        (?!00)
        [0-9]*
        \.?
        [0-9]+
        ([eE][-+]?[0-9]+)?

        | # binary
        0b[01]+

        | # octal
        0o[0-7]+

        | # octal
        0x[0-9a-f]+
      )

      # not immediatly followed by a legal identifier character
      (?![$\w\u007f-\uffff])

      (?!\.[0-9])

      ///i

    true:   "/(true|yes|on)(?![a-zA-Z0-9]+)/"
    false:  "/(false|no|off)(?![a-zA-Z0-9]+)/"
    {}
      stnFactory: :SimpleLiteralStn
      stnProps: ~>
        value:
          switch v = @toString()
          when :true,   :yes, :on   then :true
          when :false,  :no,  :off  then :false
          else v
