import &StandardImport, &CaffeineEight, &StnRegistry
{matchBlock} = Extensions.IndentBlocks

upToButNotEol = /[^\n]*/y

->
  @rule

    lineStartExpression: "multilineImplicitObject"

    implicitArrayOrExpression:
      :implicitArray
      :expression

    expression:
      :binOpExpression
      :unaryOpExpression
      :expressionWithoutBinOps

    expressionWithoutBinOps:
      :incDecUnaryExpression
      :controlStatement
      :comprehension
      :classDefinition
      :destructuringAssignment
      :structuredLiteral
      :throwExpression
      :functionDefinition
      :value

    structuredLiteral:
      :object
      :array

  @rule
    incDecUnaryExpression:
      "prefix:/\\+\\+|--/ assignableValue"
      "assignableValue postfix:/\\+\\+|--/"
      stnFactory: :UnaryOperatorStn
      stnProps: ~>
        operand:  (@prefix || @postfix).toString()
        tail:     !!@postfix?.toString()

  @rule
    throwExpression: "throw _ expressionWithoutBinOps"
    {} stnFactory: :ThrowStn

  @rule
    expressionWithOneLessBlock:
      parse: (parentNode) ~>
        {nextOffset, source} = parentNode
        offset = nextOffset
        originalOffset = offset
        upToButNotEol.lastIndex = offset
        if match = upToButNotEol.exec source
          [m] = match
          endOffset = offset += m.length

          while (match = matchBlock source, offset)
            endOffset = offset
            {matchLength} = match
            offset += matchLength

          expressionSource = source.slice originalOffset, endOffset
          parentNode.subparse
            expressionSource
            allowPartialMatch:    true
            rule:                 "implicitArrayOrExpression"
            originalOffset:       originalOffset
            originalMatchLength:  endOffset - originalOffset
