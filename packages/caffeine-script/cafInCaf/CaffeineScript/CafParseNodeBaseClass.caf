|caffeine-script
Foundation = require 'art-foundation'
BabelBridge = require 'babel-bridge'

{log, a, w, m, defineModule, compactFlatten, present, isFunction, BaseObject, inspect, isString} = Foundation
{Parser, Nodes, Extensions} = BabelBridge
{RuleNode} = Nodes

Rules = require './Rules'
SemanticTree = require "./SemanticTree"

##
  Eventualy I want all AstNodes to respond to:

  initially we should do:
    toJsExpression - no need for parens because it is either inside brackets already or the end of an expression.
    toStatement - no return-value needed; generate the nicest JS you can.

  eventually we should also do:
    toJsExpressionInList - add parens if a following comma would confusing things
    toJsExpression(operatorBefore, operatorAfter) - add parens if needed to ensure operator precidence

{RootStn} = require './SemanticTree'

class CafParseNodeBaseClass extends Nodes.Node

  isImplicitArray: ->
    !!@getImplicitArray()

  getMatchStns: ->
    array m from @matches when v = m.getStn?()
      v

  getImplicitArray: ->
    find match from @matches
      match.getImplicitArray?()

  getStnFactory: ->
    throw new Error "stnFactory not found: #{inspect @stnFactory}" if isString(@stnFactory) && !SemanticTree[@stnFactory]
    SemanticTree[@stnFactory] || @stnFactory


  getStnChildren: (left) ->
    if @stnChildren
      if isFunction @stnChildren
        @stnChildren()
      else
        @stnChildren
    else
      array m from @nonStnExtensionMatches when v = m.getStn left
        v

  @getter
    isStnExtension:         -> @stnExtension || ((p = @presentMatches).length >= 1 && p[0].isStnExtension)
    stnExtensionMatches:    -> array m from @presentMatches when m.getStn && m.isStnExtension
    nonStnExtensionMatches: -> array m from @presentMatches when m.getStn && !m.isStnExtension

  getTransformedSemanticTree: ->
    @getStn().transform()

  toJs: -> @getTransformedSemanticTree().toJs()


  getStn: (left) ->

    stn = if factory = @getStnFactory()
      factory
        parseTreeNode: @
        @stnProps?() || @stnProps
        left
        @getStnChildren()
    else
      x = @getStnChildren left

      if x.length == 1 then x[0] else if x.length == 0 then left else x

    each extension from @stnExtensionMatches
      stn = extension.getStn stn


    # CAF TODO: all we need to fix is the ?. operator!
    if stn?.props
      currentStnLabel = stn.props.label

      if !currentStnLabel || @label
        {label, ruleName, pluralLabel, pluralRuleName} = @
        stn.props.label = label || ruleName
        stn.props.pluralLabel = pluralLabel || pluralRuleName

    if @isRoot
      RootStn stn
    else
      stn

