import &StandardImport

&FunctionDefinitionArgsStn
&StatementsStn

##
  Thinking.

  I want a FunctionDefinitionStn which is scopeless.
  - It doesn't act like a scope for variables which are only assigned within it.
    - Those variables are letted in the enclosing scope.
  - If it has args, it calls @scope.addIdentifierAssigned for each using the parent scope.
  - The generated javascript uses temp variables for each of the args and then at the start
    of the function, it assigns those args to the actual-named variables bound in the enclosing
    scope.

  WHY? There are 2 or more places where I am adding new control-structures which don't define scope
  but are implemented with function-defs in javascript:
    - iterators (each, array, object, etc...)
    - promises
    - do block (?)

class FunctionDefinitionStn extends &ScopeStnMixin &BaseStn

  ###
    IN:
      props:
        bound: if true, use () => {} form, else function() {}
        returnIgnored: if true, no return statement is generated
        isConstructor: if true
          - ensure there is a super and put it in the right order
          - returnIgnored: true is implicit

  constructor: (props, children) ->
    if children.length == 1
      [onlyChild] = children
      unless onlyChild instanceof FunctionDefinitionArgsStn.class
        children = [FunctionDefinitionArgsStn(), children[0]]
    super props, children

    @arguments = children[0]
    @statements = children[1]

  cloneWithNewStatements: (statements)->
    new @class @props, [@arguments, StatementsStn compactFlatten statements]

  @getter
    needsParens: -> false
    needsParensAsStatement: -> !@props.bound
    argumentNames: ->
      @arguments?.argumentNames || []

  transform: ->
    if @props.bound == "auto"
      @props.bound = if foundParent = @findParent /Class|FunctionDefinition/
        if foundParent.type == "Class"
          false
        else
          true
      else
        false

    super

  toJs: ->
    {returnIgnored, isConstructor, bound} = @props
    returnIgnored ||= isConstructor

    [argsDef, body] = @children
    statements = []
    argsDef = if argsDef

      statements = array arg in argsDef.children when preBodyStatements = arg.getFunctionPreBodyStatementsJs() with preBodyStatements
      argsDef.toJs()
    else "()"

    bodyJs = body?.toFunctionBodyJsArray !returnIgnored
    if @props.isConstructor
      constructorSuperIndex = find v, i in bodyJs when v.match /^super\(/ with i

    # log constructorSuperIndex:constructorSuperIndex, bodyJs: bodyJs?

    statements = compactFlatten if constructorSuperIndex >= 0
      beforeSuper = bodyJs.slice 0, constructorSuperIndex
      afterSuper = bodyJs.slice constructorSuperIndex + 1, bodyJs.length
      superJs = bodyJs[constructorSuperIndex]
      [@getAutoLets(), beforeSuper, superJs, statements, afterSuper]

    else
      [@getAutoLets(), isConstructor && "super(...arguments)", statements, bodyJs]

    body = if statements.length > 0
      "{#{statements.join '; '};}"
    else "{}"

    if bound
      "#{argsDef} => #{body}"
    else
      "#{if isConstructor then "constructor" else "function"}#{argsDef} #{body}"
