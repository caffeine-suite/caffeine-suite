import &StandardImport

class SwitchWhenStn extends &BaseStn

  toJs: (options)->
    {thenDo} = @labeledChildren
    "#{@getCasesJs(options)}: #{thenDo.toJs()};"

  getCasesJs: (options)->
    {falsifyCases} = options
    {whenValue} = @labeledChildren
    cases = if whenValue.implicitArray
      array m in whenValue.children with m.toJsExpression()
    else
      [whenValue.toJsExpression()]

    if falsifyCases
      "case !(#{cases.join '): case !('})"
    else
      "case #{cases.join ': case '}"


  toFunctionBodyJs: (options)->
    {thenDo} = @labeledChildren
    "#{@getCasesJs(options)}: #{thenDo.toFunctionBodyJs()};"
