import &StandardImport, &Lib

class StatementsStn extends &BaseStn

  needsParens: false

  toJs: (options)->
    if options?.expression
      switch @children.length
      when 0 then "undefined"
      when 1 then @children[0].toJsExpression()
      else
        @applyRequiredParens
          @_getChildrenStatementsJsArray "", false
          .join ", "
    else
      @_getChildrenStatementsJsArray().join "; "

  toFunctionBodyJs: (returnAction = true)->
    @toFunctionBodyJsArray returnAction
    .join "; "

  toFunctionBodyJsArray: (returnAction = true)->
    @_getChildrenStatementsJsArray returnAction

  ###########
    PRIVATE
  _getChildrenStatementsJsArray: (returnAction, generateStatements = true)->
    if returnAction == true
      returnAction = "return"

    array c, i in lines = @children
      if returnAction && i == lines.length - 1
        if !c.jsExpressionUsesReturn
          "#{returnAction} #{c.toJsExpression()}"
        else c.toJs generateReturnStatement: true

      else
        if generateStatements
          statement = c.toJsStatement()
          if statement.match /^function/
            @applyRequiredParens statement
          else
            statement
        else
          c.toJsExpression returnValueIsIgnored: true
