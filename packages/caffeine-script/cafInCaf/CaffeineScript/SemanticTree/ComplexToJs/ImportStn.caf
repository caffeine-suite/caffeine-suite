import &StandardImport

###
  Refactor strategy:

  don't overrid updateScope

  instead, in toJs, we traverse the scope sub-tree:
    importMap = {}
    for each child-scope when child isnt ImportStn
      mergeInto importMap, @identifiersUsedButNotAssigned


class ImportStn extends &ScopeStnMixin &BaseStn

  updateScope: (@scope)->
    @bindAllUniqueIdentifiersRequested()  # identical to super

    @statementsChild = peek @children
    @importChildren = @children.slice 0, @children.length - 1

    each child in @importChildren # slightly different from super
      child.updateScope @scope

    @scope.addChildScope @  # identical to super other than order
    @_scopeUpdated = true   # identical to super

    @statementsChild.updateScope @
    {identifiersUsedButNotAssigned} = @
    @importing = Object.keys identifiersUsedButNotAssigned

    each v, id in identifiersUsedButNotAssigned
      @scope.addIdentifierAssigned id

  addIdentifierAssigned: (id, init) ->
    @scope.addIdentifierAssigned id, init

  jsExpressionUsesReturn: true

  @getter
    nonImportScope: ->
      {scope} = @
      {scope} = scope while scope.type == "Import"
      # {scope} = scope while scope.class == ImportStn
      scope

    importFromCaptureIdentifier: ->
      @_importFromCaptureIdentifier ||= @nonImportScope.bindUniqueIdentifier "parentImports"

  toJs: (options = {})->
    {generateReturnStatement} = options
    importFromCaptureIdentifier = null
    if p = @findParent "Import"
      {importFromCaptureIdentifier} = p
      true

    # importFromCaptureIdentifier ||= "global"

    bodyJs = @statementsChild.toFunctionBodyJs !!generateReturnStatement

    importsJs = array c in @importChildren with c.toJsExpression()

    list = array i in @importing with "" "#{i}"
    importingJs = "" [#{list.join ', '}]

    importFromCaptureIdentifier ||= "global"

    importsJs = compactFlatten [importFromCaptureIdentifier, importsJs]

    imports = if @importing?.length > 0
      ""
        ({#{@importing.join ', '}} =

        Caf.import(#{importingJs},
        #{if @_importFromCaptureIdentifier then "#{@_importFromCaptureIdentifier} = " else ''}[#{importsJs.join ', '}]));

    else ""

    "#{imports}#{bodyJs}"
