import &StandardImport

StatementsStn = &StatementsStn

class RootStn extends &ScopeStnMixin &BaseStn
  constructor: (props, children) ->
    super
    @_scopeHasBeenUpdated = false
    @statements = children[0]

  cloneWithNewStatements: (statements)->
    new RootStn @props, [] StatementsStn compactFlatten statements

  updateScope: ->
    unless @_scopeHasBeenUpdated
      super @

  toJsModule: ->
    @updateScope()
    {identifiersUsedButNotAssigned} = @
    identifiersUsedButNotAssigned = array v, k in identifiersUsedButNotAssigned with "#{k} = global.#{k}"

    statementsJs = @statements.toFunctionBodyJs()

    lets = compactFlatten [] identifiersUsedButNotAssigned, @requiredIdentifierLets
    statements = compactFlatten []
      "let #{lets.join ', '}" if lets.length > 0
      statementsJs

    """
      "use strict"
      let Caf = require('caffeine-script-runtime');
      Caf.defMod(module, () => {#{statements.join '; '};});

  toJs: ->
    @updateScope()
    statements = @statements.toJs()
    compactFlatten []
      @getAutoLets()
      statements
    .join '; '
    + ";"

  toBareJs: ->
    @updateScope()
    statements = @statements.toJs()
    compactFlatten []
      "" Caf = require('caffeine-script-runtime')
      @getBareInitializers()
      statements
    .join ';\n'
    + ";"
