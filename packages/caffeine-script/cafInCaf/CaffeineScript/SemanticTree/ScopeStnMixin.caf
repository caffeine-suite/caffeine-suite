import &StandardImport

UniqueIdentifierHandle = &UniqueIdentifierHandle

(toExtend) -> class ScopeStnMixin extends toExtend
  @abstractClass()
  @normalizePerferredName: normalizePerferredName = (preferredName = "temp") ->
    lowerCamelCase if preferredName.match /^caf/i
      preferredName
    else
      "caf #{preferredName}"

  constructor: ->
    super
    @_uniqueIdentifierHandles =
    @_boundUniqueIdentifiers =

    @_identifiersUsedButNotAssigned =
    @_argumentNames =
    @_identifiersUsed =
    @_identifiersAssigned =
    @_identifiersInScope = null

    @_scopeUpdated = false

  @getter
    argumentNames:       -> @_argumentNames ||= {}
    identifiersUsed:     -> @_identifiersUsed ||= {}
    identifiersAssigned: -> @_identifiersAssigned ||= {}
    identifiersInScope:  -> @_identifiersInScope ||= {}

  addArgumentName: (identifier) ->
    @argumentNames[identifier] = true

  addIdentifierUsed: (identifier)->
    throw new Error "bindUniqueIdentifier must be called AFTER all calls to addIdentifierUsed" if @_boundUniqueIdentifiers
    @identifiersInScope[identifier] = true
    @identifiersUsed[identifier] = true


  addIdentifierAssigned: (identifier, initializer)->
    if identifier
      throw new Error "bindUniqueIdentifier must be called AFTER all calls to addIdentifierAssigned" if @_boundUniqueIdentifiers
      @identifiersInScope[identifier] = true
      @identifiersAssigned[identifier] = initializer || true

  @getter
    # call during toJs
    uniqueIdentifier: (preferredName) ->
      preferredName = normalizePerferredName preferredName
      @getUniqueIdentifierHandle(preferredName).identifier

    # call during transform
    uniqueIdentifierHandle: (preferredName) ->
      preferredName = normalizePerferredName preferredName
      @addUniqueIdentifierHandle new UniqueIdentifierHandle preferredName

  addUniqueIdentifierHandle: (uih) ->
    unless uih.scope
      uih.scope = @
      @uniqueIdentifierHandles.push uih
      uih

  # must be called after all calls to addIdentifierAssigned && addIdentifierUsed
  bindUniqueIdentifier: (preferredName, uniqueIdentifierHandle, addToLets = true) ->
    preferredName = normalizePerferredName preferredName
    identifier = @getAvailableIdentifierName preferredName
    @boundUniqueIdentifiers[identifier] = uniqueIdentifierHandle
    @identifiersInScope[identifier] = true
    @identifiersAssigned[identifier] = true if addToLets
    identifier

  getAvailableIdentifierName: (preferredName) ->
    preferredName = normalizePerferredName preferredName
    unless @_scopeUpdated
      log.error ScopeStnMixin: getAvailableIdentifierName: "cannot be called before updateScope completes: #{@className}", new Error
    else
      {identifiersActiveInScope} = @
      unless identifiersActiveInScope[preferredName]
        preferredName
      else
        count = 0
        name while identifiersActiveInScope[name = "#{preferredName}#{count+=1}"]
        name

  addChildScope: (child) ->
    unless child == @
      (@childScopes ||= []).push child

  bindAllUniqueIdentifiersRequested: ->
    if @_uniqueIdentifierHandles
      each uniqueIdentifierHandle in @_uniqueIdentifierHandles
        uniqueIdentifierHandle.identifier

  getAutoLets: ->
    @bindAllUniqueIdentifiersRequested()
    if @_identifiersAssigned && (identifiers = @requiredIdentifierLets).length > 0
      "let #{identifiers.join ', '}"

  getBareInitializers: ->
    @bindAllUniqueIdentifiersRequested()
    if @_identifiersAssigned && (identifiers = @requiredIdentifierLets).length > 0
      identifiers = array identifier from identifiers when identifier.match /=/
      if identifiers.length > 0
        "#{identifiers.join '; '}"

  updateScope: (@scope)->
    @bindAllUniqueIdentifiersRequested()
    @scope.addChildScope @
    each child in @getChildrenToUpdateScope() do child.updateScope @
    @_scopeUpdated = true

  @getter
    childrenToUpdateScope: -> @children

    uniqueIdentifierHandles: -> @_uniqueIdentifierHandles ||= []

    boundUniqueIdentifiers: ->
      @_boundUniqueIdentifiers ||= {}

    requiredIdentifierLets: ->
      {identifiersAssignedInParentScopes} = @
      array initializer, identifier from @identifiersAssigned when !identifiersAssignedInParentScopes || !identifiersAssignedInParentScopes[identifier]
        if isString initializer
          "#{identifier} = #{initializer}"
        else if initializer.toJsExpression?
          "#{identifier} = #{initializer.toJsExpression()}"
        else
          identifier


    identifiersActiveInScope: ->
      out = merge @_identifiersInScope
      {scope} = @

      notDone = true
      while scope && notDone
        mergeInto out, scope.identifiersAssigned
        if scope == scope.scope
          notDone = false
        else
          {scope} = scope

      out

    identifiersUsedButNotAssigned: ->
      assigned = @identifiersAssignedInParentThisOrChildrenScopes
      ret = object v, k from @identifiersUsed when !assigned[k] with true

      each childScope in @childScopes
        mergeInto ret, childScope.identifiersUsedButNotAssigned

      @_identifiersUsedButNotAssigned = ret

    identifiersAssignedInParentThisOrChildrenScopes: -> merge @identifiersAssigned, @identifiersAssignedInParentScopes
    identifiersAssignedInParentScopes: ->
      if @scope && @scope != @
        merge @scope.identifiersAssignedInParentScopes, @scope.identifiersAssigned, @argumentNames
