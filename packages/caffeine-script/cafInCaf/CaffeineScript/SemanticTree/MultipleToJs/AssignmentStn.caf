import &StandardImport
SemanticTree = &StnRegistry

supportedOperatorsRegExp = /^([-+*\/%]|)$/

class AssignmentStn extends &ValueBaseCaptureStn
  constructor: (props, children) ->
    super
    @operator =  props.operator || ""
    @lValue = children[0]
    @rValue = children[1]

  transform: ->
    @transformAccessorChain()
    .postTransform()

  # value and key are for compatibility with ValueBaseCaptureStn
  @getter
    value:  -> @lValue
    key:    -> @rValue

  updateScope: (@scope) ->
    @scope.addIdentifierAssigned @lValue?.explicitIdentifier
    super

  postTransform: ->
    unless supportedOperatorsRegExp.test @operator
      {value1, value2} = @getValueWithBaseCapture @lValue

      SemanticTree.BinaryOperatorStn
        operator: @operator
        value1
        SemanticTree.AssignmentStn
          value2
          @rValue
    else
      @

  toJs: (options) ->
    out = if supportedOperatorsRegExp.test @operator
      "#{@lValue.toJs()} #{@operator}= #{@rValue.toJsExpression()}"
    else
      "#{@lValue.toJsExpression()} #{@operator} #{@lValue.toJs()} = #{@rValue.toJsExpression()}"
    if options?.dotBase || options?.subExpression
      "(#{out})"
    else out

  toJsParenExpression: ->
    "(#{@toJs()})"
