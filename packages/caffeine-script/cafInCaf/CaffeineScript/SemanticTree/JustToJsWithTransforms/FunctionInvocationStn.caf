import &StandardImport

SemanticTree = require './namespace'

class FunctionInvocationStn extends &ValueBaseCaptureStn

  constructor: (props, children) ->
    super
    [functionValue, argStns...] = children
    @key = @argStns = argStns
    @value = @functionValue = functionValue

    # collapse implicit arrays into parents
    if @argStns.length == 1 && @argStns[0].props.implicitArray
      @argStns = @argStns[0].children

    @props.existanceTest ||= true if @parseTreeNode?.conditional || @parseTreeNode?.existanceTest

  needsParens: false

  @getter
    existanceTest: -> @props.existanceTest
    isFunctionInvocation: -> true

  transform: -> @transformAccessorChain()

  toJs: ->
    throw new Error "can't be existanceTest here" if @existanceTest
    "#{valueJs = @functionValue.toJsExpression()}#{@applyRequiredParens (array a in @argStns with a.toJsExpression()).join ', '}"

