import &StandardImport
{createObjectTreeFactory} = &ArtObjectTreeFactory

##
  TODO:
    I want all Stn constructors to only accept an object.
    All children are labeled children.
    Pros
    - Positional is so fragile.
    - Properties can have arrays of children: for unbounded lists
    - It'll be much easier for writing code that generates Stns

class BaseStn extends BaseClass
  ############################################
    Could go in BabelBridge standard BaseStn

  unless &CaffeineScriptRuntime.getSuper(@) == BaseClass
    log
      self: @
      selfName: @getName()
      Object.getPrototypeOf@: Object.getPrototypeOf @
      badSuper: &CaffeineScriptRuntime.getSuper(@)
      BaseClass: BaseClass
      selfIsBaseObject?: @ == BaseClass
    throw new Error "bad super"

  @abstractClass()

  toJsParenExpression: (options)->
    @toJs merge options, expression: true

  ###
    IN:
      props should be a plain-object-structure with an object as the root
      children should be a compatoJsParenExpressionct, flat array of Stns

    TODO: I'd like to make setting the parseTreeNode cleaner.
  constructor: (props, @children = []) ->
    super
    @parseTreeNode = props.parseTreeNode

    @props = objectWithout props, "parseTreeNode"
    @initLabeledChildren()

  initLabeledChildren: ->
    @labeledChildren = @children && {}
    each child in @children
      child.parent = @
      {label, pluralLabel} = child
      @labeledChildren[label] = child
      if pluralLabel
        (@labeledChildren[pluralLabel] ||= []).push child


  @getter
    parser: -> @parseTreeNode.parser.rootParser
    sourceFile: -> @parser.sourceFile
    label: -> @props.label
    pluralLabel: -> @props.pluralLabel
    inspectedObjects: ->
      {label} = @

      props = objectWithout @props, "label", "pluralLabel"
      name = @class.getName()
      name = "#{label}.#{name}" if label

      "#{name}":
        if @children.length == 0
          toInspectedObjects props
        else
          a = []
          a.push props if objectKeyCount(props) > 0
          a.concat array c in @children with c.inspectedObjects

    type: -> @class.type

  @postCreate: ->
    s = @getName().split /Stn$/
    @type = s[0]
    super

  # so subclasses can add custom newInstance implementations
  @newInstance: (props, children) ->
    new @ props, children

  @postCreateConcreteClass: (options)->
    {classModuleState, hotReloadEnabled} = options
    super
    &StnRegistry.register createObjectTreeFactory
      class: @
      (props, children) =>
        @newInstance props, children

  findParent: (stnTypePattern) ->
    {parent} = @
    found = null
    while parent && !found
      if parent.type.match stnTypePattern
        found = parent
      else
        {parent} = parent
    found

    ## TODO - with "tap", this is just:
      {parent} = @
      while parent
        if parent.type.match stnTypePattern
          parent tap parent = null
        else
          parent extract parent

      # - with "return", this is just:
      {parent} = @
      while parent
        if parent.type.match stnTypePattern
          return parent
        else
          parent extract parent

      # recursion:
      if parent.type.match stnTypePattern
        parent
      else
        parent.findParent stnTypePattern

  find: (stnTypePattern) ->
    a = compactFlatten array child in @children
      if child.type.match stnTypePattern
        child
      else
        child.find stnTypePattern

    if a.length == 0
      null
    else
      a

  ############################################
    Unique to CafScript

  childrenToJs: (joiner = '')->
    array c in @children with c.toJs()
    .join joiner

  ##
    IN: options:
      expression: t/f
        if true, return JS for an expression

      subExpression: t/f
        currently this means the result is used
        in a binary operator

      statement: t/f
        true: is used as a s

      dotBase: t/f
        true: is used as the base for a . or [] accessor.

      returnValueIsIgnored: t/f
        if true and expression is true, still return
        an expression, but it's OK to streamline since the
        return-value is ignored.

        This is for use in expressiong-statement-lists: (expressionStatement1, es2, es3)
        Only the last value, es3, has a meaningful return-value.

  toJs: (options) ->
    throw new Error "must override one of the toJs* functions: #{@className}"

  doJs: (args, body) ->
    throw "TODO" if args
    body = body.toFunctionBodyJs() unless isString body

    "(() => {#{body};})()"

  toFunctionBodyJsArray: (returnAction = true)->
    if returnAction
      ["return #{@toJsExpression()}"]
    else
      [@toJs()]

  toFunctionBodyJs: (returnAction = true)->
    @toFunctionBodyJsArray(returnAction).join ''

  # return JS code that can be used as js-expression (returns a value)
  # for statements: a; b; return c;
  toJsExpression: (options)->
    @toJs merge options, expression: true

  # a string that can be inserted in the middle of an ES6 interpolation string: `...`
  toInterpolatedJsStringPart: -> "${Caf.toString(#{@toJsExpression()})}"

  ##
    TODO: this is getting out of hand! We need to convert
    the whole SematicTree system over to ONLY using labeled children.

    In fact, BabelBridge should probably strongly discourage using the "@matches"
    list.

    Labeled children can either be singles or arrays - if more than one child
    has the same label.

    Labels from BabelBridge should be explicit labels, if there are any, OR
    the rule's name. I think right now we have a 'contextual' aspect which is
    just confusing - if any node in a change of nodes has a label, that's what
    is used for the label for that branch.

    We should also refactor BaseStn so that transform ALWAYS
    transforms children first, then, optionally, the transform override is called,
    after the children are 'normalized.'

    Rethinking transform:

      I think I want two node-types: 'macros' and 'standard'

      standard: can output JS and are more-or-less 1:1 with JS.
        Auto-lets will probably still be managed by standard-nodes,
        but otherwise, the output-JS requires no other preprocessing.

        These nodes do not have a 'transform' method.

      macros:
        These nodes cannot generate JS, but they can transform themselves
        into 'standard' nodes.

        Macro nodes expect their children to be standard nodes when
        their transform-method is called.

  transformChildren: ->
    ret = null
    each child, i in @children
      if child != newChild = child.transform()
        ret ?= @children.slice()
        newChild.props.label = child.label
        ret[i] = newChild
    ret || @children

  # transform after children have been transformed
  postTransform: -> @

  transform: ->
    if @children != newChildren = @transformChildren()
      new @class @props, newChildren
    else
      @
    .postTransform()

  needsParens: true
  needsParensAsStatement: false

  getNeedsParens: -> @needsParens
  getNeedsParensAsStatement: -> @needsParensAsStatement

  @applyRequiredParens: applyRequiredParens = (expr) ->
    "(#{expr})"

  @applyParens: applyParens = (expr) ->
    if expr.match
        ///i
          ^(

          \([^)]*\) |

          \[[^\]]*\] |

          ([!~-]*[_a-z0-9.]*)(\([^)]*\))?

          )$
      expr
    else
      "(#{expr})"

  applyRequiredParens: applyRequiredParens
  applyParens: applyParens

  @getter
    normalizedOperand: ->
      switch op = @props.operand
        when "and" then "&&"
        when "or"  then "||"
        when "==", "is"   then "==="
        when "!=", "isnt" then "!=="
        when "not" then "!"
        else op

  updateScope: (@scope) ->
    each child in @children
      child.updateScope @scope
