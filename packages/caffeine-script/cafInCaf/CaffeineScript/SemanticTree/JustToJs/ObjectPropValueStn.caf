## import &StandardImport

  class ObjectPropValueStn extends &BaseStn

    @getter isObject: true

    toJs: ->
      [prop, value] = @children
      "#{prop.toJs()}: #{value.toJsExpression()}"

import &StandardImport

##
  props:
    propertyName: string (optional)

identifierRegexp =
  ///
    ^
    (?!\d)
    ( (?!\s) [$\w\u007f-\uffff] )+
    $

class ObjectPropValueStn extends &BaseStn

  @getter
    isObject: true
    propName: -> @labeledChildren.propName.props.value

  toJs: ->
    switch @children.length
    when 2
      [propNameStn, valueStn] = @children
      valueJs = valueStn.toJsExpression()
      propertyName = propNameStn.toJs()
    when 1
      structuringStn = @children[0]

      valueJs = structuringStn.toJsExpression()
      propertyName = peek valueJs.split "."

      unless identifierRegexp.test propertyName
        # TODO - use propery validator system so we can get line-numbers with this
        throw new Error "expression not allowed in explicit object literal: #{valueJs}"

    else
      throw new Error "internal error - expecint 1 or 2 children"

    if propertyName == valueJs && !javaScriptReservedWords[propertyName] && identifierRegexp.test propertyName

      valueJs
    else
      "#{propertyName}: #{valueJs}"
