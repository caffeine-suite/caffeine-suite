import &StandardImport

&AssignmentStn
&AccessorStn
&ThisStn
&IdentifierStn
&StatementsStn
&FunctionDefinitionStn
&FunctionDefinitionArgsStn
&FunctionDefinitionArgStn
&UniqueIdentifierHandle

class ClassStn extends &BaseStn

  transform: ->
    {className, classExtends, body} = @labeledChildren
    # log labeledChildren:@labeledChildren, className: @className
    className = className.transform()
    classExtends = classExtends?.transform()

    if body = body?.transform()
      constructor = null
      body = FunctionDefinitionStn
        label: "body"
        returnIgnored: true
        FunctionDefinitionArgsStn
          FunctionDefinitionArgStn IdentifierStn identifier: className.toJs()

          ## TODO: switch to these:
            FunctionDefinitionArgStn IdentifierStn identifierHandle: classSuperHandle    = new UniqueIdentifierHandle "classSuper"
            FunctionDefinitionArgStn IdentifierStn identifierHandle: instanceSuperHandle = new UniqueIdentifierHandle "instanceSuper"
          FunctionDefinitionArgStn IdentifierStn identifier: classSuperHandle    = "classSuper"
          FunctionDefinitionArgStn IdentifierStn identifier: instanceSuperHandle = "instanceSuper"
        StatementsStn
          statementsToCount = array stn in body.children
            if stn.type == "Object"
              array objectPropValueStn in stn.children
                [propNameStn, propValueStn] = objectPropValueStn.children
                assignToStn = switch propNameStn.type
                  when "ObjectPropName"
                    propName = propNameStn.toJs()
                    if m = propName.match /^"@(.*)"$/
                      [__, classPropName] = m
                      ThisStn IdentifierStn identifier: classPropName
                    else
                      if propName == "constructor"
                        constructor = propValueStn
                        null
                      else
                        AccessorStn
                          ThisStn IdentifierStn identifier: "prototype"
                          IdentifierStn identifier: propName
                  when "Accessor"
                    AccessorStn
                      ThisStn IdentifierStn identifier: "prototype"
                      propNameStn.children
                  else
                    throw new Error "unknown object property name Stn type: #{propNameStn.type}"
                assignToStn && AssignmentStn assignToStn, propValueStn
            else
              stn

      statementCount = statementsToCount.length
      if constructor
        statementCount -= 1
        constructor.props.isConstructor = true
        if superCallChildren = constructor.find "Super"
          throw new Error "at most one super call in constructor" unless superCallChildren.length == 1
          superCallChildren[0].props.calledInConstructor = true

        classBody = StatementsStn
          label: "classBody"
          constructor

      body = null if statementsToCount <= 0
      children = compactFlatten [className, classExtends, body, classBody]
    else
      children = @transformChildren()
    new ClassStn
      merge @props, classSuperHandle: classSuperHandle, instanceSuperHandle: instanceSuperHandle
      children


  toJs: ->
    {className, classExtends, body, classBody} = @labeledChildren
    className = className.toJs()
    out = "#{className} = Caf.defClass(class #{className}"
    if classExtends
      out += " extends #{classExtends.toJsExpression()}"

    classBodyJs = "{#{classBody?.toJs()||''}}"

    if body
      out + " #{classBodyJs}, #{body.toJs()})"
    else
      out + " #{classBodyJs})"
