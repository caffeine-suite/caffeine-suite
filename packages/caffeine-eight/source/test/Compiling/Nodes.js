// Generated by CoffeeScript 1.12.7
(function() {
  var Node, Parser, assert, log, ref, ref1, ref2, w,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require("art-standard-lib"), log = ref.log, w = ref.w;

  ref1 = require("../../"), Parser = ref1.Parser, (ref2 = ref1.Nodes, Node = ref2.Node);

  assert = require("art-testbench").assert;

  module.exports = {
    suite: {
      regressions: function() {
        return test("cache and node mutations - or lack thereof soon", function() {
          var MyParser, mainNode;
          MyParser = (function(superClass) {
            extend(MyParser, superClass);

            function MyParser() {
              return MyParser.__super__.constructor.apply(this, arguments);
            }

            MyParser.rule({
              root: w("doesntMatch1 doesntMatch2 doesMatch"),
              doesntMatch1: "label ':('",
              doesntMatch2: "bad:identifier ':('",
              doesMatch: "label ')'",
              label: "good:identifier ':'",
              identifier: /[_a-z0-9]+/i
            });

            return MyParser;

          })(Parser);
          mainNode = MyParser.parse("boo:)");
          return assert.eq("good", mainNode.matches[0].matches[0].matches[0].label);
        });
      }
    }
  };

}).call(this);
