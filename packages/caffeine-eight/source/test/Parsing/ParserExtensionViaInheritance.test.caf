import &StandardImport

describe
  basic: ->
    MyParser = MySubParser = null
    getParserClasses = ->
      class MyParser extends Parser
        @rule root: "'foo'"

      class MySubParser extends MyParser
        @rule root: "'bar'"

      {} MyParser, MySubParser

    test "parsers are extensible", ->
      getParserClasses() extract MyParser, MySubParser
      myParser = new MySubParser
      myParser.parse "bar"
      myParser.parse "foo"

    test "parsers extentension doesn't alter parent class", ->
      getParserClasses() extract MyParser, MySubParser
      myParser1 = new MyParser
      myParser2 = new MySubParser
      assert.throws -> myParser1.parse "bar"
      assert.true   !!myParser2.parse "bar"

  priorityRule: ->

    test "parsers are extensible", ->
      class MyParser extends Parser
        @rule root: "'foo' 'o'?"

      class MyNormalSubParser extends MyParser
        @rule root: "'fooo'"

      class MyPrioritySubParser extends MyParser
        @priorityRule root: "'fooo'"

      assert.eq 2,
        (new MyParser)
        .parse "fooo"
        .matches.length
        "MyParser"

      assert.eq 2,
        (new MyNormalSubParser)
        .parse "fooo"
        .matches.length
        "MyNormalSubParser"

      assert.eq 1,
        (new MyPrioritySubParser)
        .parse "fooo"
        .matches.length
        "MyPrioritySubParser"

  replaceRule: ->

    test "parsers are extensible", ->
      class MyParser extends Parser
        @rule root: /foo/

      class MyReplaceSubParser extends MyParser
        @replaceRule root: /bar/

      (new MyParser).parse "foo"
      assert.throws -> (new MyParser).parse "bar"

      (new MyReplaceSubParser).parse "bar"
      assert.throws -> (new MyReplaceSubParser).parse "foo"

