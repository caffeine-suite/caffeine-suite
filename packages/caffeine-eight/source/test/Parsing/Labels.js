// Generated by CoffeeScript 1.12.7
(function() {
  var Nodes, Parser, log, ref, ref1, wordsArray,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Neptune.Art.StandardLib, log = ref.log, wordsArray = ref.wordsArray;

  ref1 = Neptune.Caffeine.Eight, Parser = ref1.Parser, Nodes = ref1.Nodes;

  module.exports = {
    suite: function() {
      test("three different labels", function() {
        var MyParser, mainNode;
        MyParser = (function(superClass) {
          extend(MyParser, superClass);

          function MyParser() {
            return MyParser.__super__.constructor.apply(this, arguments);
          }

          MyParser.rule({
            root: {
              pattern: "a:'eh'?\nb:'bee'?\nc:'cee'?",
              nodeClass: {
                result: function() {
                  var ref2, ref3, ref4;
                  return {
                    a: (ref2 = this.a) != null ? ref2.text : void 0,
                    b: (ref3 = this.b) != null ? ref3.text : void 0,
                    c: (ref4 = this.c) != null ? ref4.text : void 0
                  };
                }
              }
            }
          });

          return MyParser;

        })(Parser);
        mainNode = MyParser.parse("ehcee");
        return assert.eq(mainNode.result(), {
          a: "eh",
          b: void 0,
          c: "cee"
        });
      });
      return test("three same labels", function() {
        var MyParser, mainNode;
        MyParser = (function(superClass) {
          extend(MyParser, superClass);

          function MyParser() {
            return MyParser.__super__.constructor.apply(this, arguments);
          }

          MyParser.rule({
            root: {
              pattern: "a:'eh'?\na:'bee'?\na:'cee'?",
              nodeClass: {
                result: function() {
                  var match;
                  return {
                    a: this.a.text,
                    "matches.a": (function() {
                      var i, len, ref2, results;
                      ref2 = this.as;
                      results = [];
                      for (i = 0, len = ref2.length; i < len; i++) {
                        match = ref2[i];
                        results.push(match.text);
                      }
                      return results;
                    }).call(this)
                  };
                }
              }
            }
          });

          return MyParser;

        })(Parser);
        mainNode = MyParser.parse("ehcee");
        return assert.eq(mainNode.result(), {
          a: "cee",
          "matches.a": ["eh", "cee"]
        });
      });
    }
  };

}).call(this);
