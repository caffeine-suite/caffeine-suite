"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "SourceLineColumnMap", "assert"], [global, require('./StandardImport')], (describe, test, SourceLineColumnMap, assert) => {return describe({new: function() {return test("new SourceLineColumnMap", () => new SourceLineColumnMap("hi"));}, getLineColumn: function() {test("one-line-source", () => {let map; map = new SourceLineColumnMap("hi"); assert.eq({line: 0, column: 0}, map.getLineColumn(0)); assert.eq({line: 0, column: 1}, map.getLineColumn(1)); assert.eq({line: 0, column: 2}, map.getLineColumn(2)); return assert.eq({line: 0, column: 100}, map.getLineColumn(100));}); test("two-line-source", () => {let map; map = new SourceLineColumnMap("hi\nthere"); assert.eq({line: 0, column: 0}, map.getLineColumn(0)); assert.eq({line: 0, column: 1}, map.getLineColumn(1)); assert.eq({line: 0, column: 2}, map.getLineColumn(2)); assert.eq({line: 1, column: 0}, map.getLineColumn(3)); assert.eq({line: 1, column: 1}, map.getLineColumn(4)); assert.eq({line: 1, column: 2}, map.getLineColumn(5)); assert.eq({line: 1, column: 3}, map.getLineColumn(6)); assert.eq({line: 1, column: 4}, map.getLineColumn(7)); assert.eq({line: 1, column: 5}, map.getLineColumn(8)); return assert.eq({line: 1, column: 97}, map.getLineColumn(100));}); return test("three-line-source", () => {let map; map = new SourceLineColumnMap("hi\nthere\nfriend"); assert.eq({line: 0, column: 2}, map.getLineColumn(2)); assert.eq({line: 1, column: 0}, map.getLineColumn(3)); assert.eq({line: 1, column: 5}, map.getLineColumn(8)); assert.eq({line: 2, column: 0}, map.getLineColumn(9)); return assert.eq({line: 2, column: 91}, map.getLineColumn(100));});}, withInto: function() {return test("three-line-source", () => {let _into, map; _into = {}; map = new SourceLineColumnMap("hi\nthere\nfriend"); assert.equal(_into, map.getLineColumn(2, _into)); return assert.equal(_into, map.getLineColumn(3, _into));});}, getIndex: function() {return test("three-line-source", () => {let map; map = new SourceLineColumnMap("hi\nthere\nfriend"); return Caf.each2([2, 3, 8, 9, 100], (index) => {let line, column; ({line, column} = map.getLineColumn(index)); return assert.eq(index, map.getIndex(line, column), {index, line, column});});});}});});});
//# sourceMappingURL=SourceLineColumnMap.test.js.map
