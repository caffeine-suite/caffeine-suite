// Generated by CoffeeScript 1.12.7
(function() {
  var Nodes, Parser, defineModule, log, ref, ref1, wordsArray,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = Neptune.Art.StandardLib, defineModule = ref.defineModule, log = ref.log, wordsArray = ref.wordsArray;

  ref1 = Neptune.Caffeine.Eight, Parser = ref1.Parser, Nodes = ref1.Nodes;

  defineModule(module, {
    suite: {
      simplest: function() {
        test("depth 1", function() {
          var MyLeftRecursiveParser, p;
          MyLeftRecursiveParser = (function(superClass) {
            extend(MyLeftRecursiveParser, superClass);

            function MyLeftRecursiveParser() {
              return MyLeftRecursiveParser.__super__.constructor.apply(this, arguments);
            }

            MyLeftRecursiveParser.rule({
              root: "leftRecursiveRule",
              leftRecursiveRule: ["leftRecursiveRule '.'", "'&'"]
            });

            return MyLeftRecursiveParser;

          })(Parser);
          p = new MyLeftRecursiveParser;
          return assert.rejects(function() {
            return p.parse("&.");
          });
        });
        return test("depth 2", function() {
          var MyLeftRecursiveParser, p;
          MyLeftRecursiveParser = (function(superClass) {
            extend(MyLeftRecursiveParser, superClass);

            function MyLeftRecursiveParser() {
              return MyLeftRecursiveParser.__super__.constructor.apply(this, arguments);
            }

            MyLeftRecursiveParser.rule({
              root: "leftRecursiveRule",
              leftRecursiveRule: ["leftRecursiveRule '.'", "'&'"]
            });

            return MyLeftRecursiveParser;

          })(Parser);
          p = new MyLeftRecursiveParser;
          return assert.rejects(function() {
            return p.parse("&..");
          });
        });
      }
    }
  });

}).call(this);

//# sourceMappingURL=LeftRecursive.js.map
