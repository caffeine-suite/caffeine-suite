"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Parser", "assert"], [global, require('../StandardImport')], (describe, test, Parser, assert) => {return describe({basic: function() {let MyParser, MySubParser, getParserClasses; MyParser = MySubParser = null; getParserClasses = () => {MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule({root: "'foo'"});}); MySubParser = Caf.defClass(class MySubParser extends MyParser {}, function(MySubParser, classSuper, instanceSuper) {this.rule({root: "'bar'"});}); return {MyParser, MySubParser};}; test("parsers are extensible", () => {let myParser, temp; temp = getParserClasses(); MyParser = temp.MyParser; MySubParser = temp.MySubParser; myParser = new MySubParser; myParser.parse("bar"); return myParser.parse("foo");}); test("parsers extentension doesn't alter parent class", () => {let myParser1, myParser2, temp; temp = getParserClasses(); MyParser = temp.MyParser; MySubParser = temp.MySubParser; myParser1 = new MyParser; myParser2 = new MySubParser; assert.throws(() => myParser1.parse("bar")); return assert.true(!!myParser2.parse("bar"));}); return test("can add rules from instance", () => {let myParser, result; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule({root: "'foo'"});}); myParser = new MyParser; myParser.rule({root: "'bar'"}); result = myParser.parse("bar"); assert.eq(result.offset, 0); assert.eq(result.matchLength, 3); return assert.eq(result.text, "bar");});}, priorityRule: function() {return test("parsers are extensible", () => {let MyParser, MyNormalSubParser, MyPrioritySubParser; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule({root: "'foo' 'o'?"});}); MyNormalSubParser = Caf.defClass(class MyNormalSubParser extends MyParser {}, function(MyNormalSubParser, classSuper, instanceSuper) {this.rule({root: "'fooo'"});}); MyPrioritySubParser = Caf.defClass(class MyPrioritySubParser extends MyParser {}, function(MyPrioritySubParser, classSuper, instanceSuper) {this.priorityRule({root: "'fooo'"});}); assert.eq(2, (new MyParser).parse("fooo").matches.length, "MyParser"); assert.eq(2, (new MyNormalSubParser).parse("fooo").matches.length, "MyNormalSubParser"); return assert.eq(1, (new MyPrioritySubParser).parse("fooo").matches.length, "MyPrioritySubParser");});}, replaceRule: function() {return test("parsers are extensible", () => {let MyParser, MyReplaceSubParser; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule({root: /foo/});}); MyReplaceSubParser = Caf.defClass(class MyReplaceSubParser extends MyParser {}, function(MyReplaceSubParser, classSuper, instanceSuper) {this.replaceRule({root: /bar/});}); (new MyParser).parse("foo"); assert.throws(() => (new MyParser).parse("bar")); (new MyReplaceSubParser).parse("bar"); return assert.throws(() => (new MyReplaceSubParser).parse("foo"));});}});});});
//# sourceMappingURL=ParserExtensionViaInheritance.test.js.map
