"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["describe", "test", "Parser", "assert"], [global, require('../StandardImport')], (describe, test, Parser, assert) => {return describe({"javascript friendly definitions": function() {test("basic", () => {let MyParser; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule("root", /foo/, {custom: function() {return this.text.toUpperCase();}});}); return assert.eq("FOO", MyParser.parse("foo").custom());}); test("rule-ref", () => {let MyParser; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule("root", "thing", {custom: function() {return this.thing.custom();}}); this.rule("thing", /foo/, {custom: function() {return this.text.toUpperCase();}});}); return assert.eq("FOO", MyParser.parse("foo").custom());}); return test("two-patterns", () => {let MyParser; MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.rule("root", "thing1", "thing2", {custom: function() {let temp; return (((temp = this.thing1) != null ? temp : this.thing2)).custom();}}); this.rule("thing1", /foo/, {custom: function() {return this.text.toUpperCase();}}); this.rule("thing2", /bar/, {custom: function() {return this.text.toUpperCase();}});}); assert.eq("FOO", MyParser.parse("foo").custom()); assert.eq("BAR", MyParser.parse("bar").custom()); return assert.rejects(() => MyParser.parse("barf").custom());});}});});});
//# sourceMappingURL=ParserDefinition.test.js.map
