"use strict"
let Caf = require('caffeine-script-runtime');
Caf.defMod(module, () => {return Caf.importInvoke(["test", "Parser", "w", "upperCamelCase", "lowerCamelCase", "assert"], [global, require('../StandardImport')], (test, Parser, w, upperCamelCase, lowerCamelCase, assert) => {let getClass; getClass = function() {let MyParser; return MyParser = Caf.defClass(class MyParser extends Parser {}, function(MyParser, classSuper, instanceSuper) {this.nodeBaseClass = {compile: function() {return Caf.array(this.matches, (a) => a.compile(), (a) => a.compile).join("");}}; this.rule({root: "noun _ verb _ noun", _: {pattern: /\ +/, compile: function() {return " ";}}, noun: w("bugs butterflies")}); this.rule({bugs: /bugs|ladybugs|beetles/i, butterflies: /butterflies|skippers|swallowtails/i}, {compile: function() {return upperCamelCase(this.toString());}}); this.rule({verb: {pattern: /eat|shun/i, compile: function() {return lowerCamelCase(this.toString());}}});});}; test("one rule multiple patters shares a nodeBaseClass", function() {let MyParser, mainNode; MyParser = getClass(); mainNode = MyParser.parse("ladybugs eat beetles"); return assert.eq(mainNode.compile(), "Ladybugs eat Beetles");}); return test("case insensitive", function() {let MyParser, mainNode; MyParser = getClass(); mainNode = MyParser.parse("ladybugs EAT beetles"); return assert.eq(mainNode.compile(), "Ladybugs eat Beetles");});});});
//# sourceMappingURL=RuleGroupNodeBaseClass.test.js.map
