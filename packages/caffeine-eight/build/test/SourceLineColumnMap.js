// Generated by CoffeeScript 1.12.7
(function() {
  var SourceLineColumnMap, defineModule;

  defineModule = require('art-standard-lib').defineModule;

  SourceLineColumnMap = Neptune.Caffeine.Eight.SourceLineColumnMap;

  defineModule(module, {
    suite: {
      "new": function() {
        return test("new SourceLineColumnMap", function() {
          return new SourceLineColumnMap("hi");
        });
      },
      getLineColumn: function() {
        test("one-line-source", function() {
          var map;
          map = new SourceLineColumnMap("hi");
          assert.eq({
            line: 0,
            column: 0
          }, map.getLineColumn(0));
          assert.eq({
            line: 0,
            column: 1
          }, map.getLineColumn(1));
          assert.eq({
            line: 0,
            column: 2
          }, map.getLineColumn(2));
          return assert.eq({
            line: 0,
            column: 100
          }, map.getLineColumn(100));
        });
        test("two-line-source", function() {
          var map;
          map = new SourceLineColumnMap("hi\nthere");
          assert.eq({
            line: 0,
            column: 0
          }, map.getLineColumn(0));
          assert.eq({
            line: 0,
            column: 1
          }, map.getLineColumn(1));
          assert.eq({
            line: 0,
            column: 2
          }, map.getLineColumn(2));
          assert.eq({
            line: 1,
            column: 0
          }, map.getLineColumn(3));
          assert.eq({
            line: 1,
            column: 1
          }, map.getLineColumn(4));
          assert.eq({
            line: 1,
            column: 2
          }, map.getLineColumn(5));
          assert.eq({
            line: 1,
            column: 3
          }, map.getLineColumn(6));
          assert.eq({
            line: 1,
            column: 4
          }, map.getLineColumn(7));
          assert.eq({
            line: 1,
            column: 5
          }, map.getLineColumn(8));
          return assert.eq({
            line: 1,
            column: 97
          }, map.getLineColumn(100));
        });
        return test("three-line-source", function() {
          var map;
          map = new SourceLineColumnMap("hi\nthere\nfriend");
          assert.eq({
            line: 0,
            column: 2
          }, map.getLineColumn(2));
          assert.eq({
            line: 1,
            column: 0
          }, map.getLineColumn(3));
          assert.eq({
            line: 1,
            column: 5
          }, map.getLineColumn(8));
          assert.eq({
            line: 2,
            column: 0
          }, map.getLineColumn(9));
          return assert.eq({
            line: 2,
            column: 91
          }, map.getLineColumn(100));
        });
      },
      withInto: function() {
        return test("three-line-source", function() {
          var into, map;
          into = {};
          map = new SourceLineColumnMap("hi\nthere\nfriend");
          assert.equal(into, map.getLineColumn(2, into));
          return assert.equal(into, map.getLineColumn(3, into));
        });
      },
      getIndex: function() {
        return test("three-line-source", function() {
          var column, i, index, len, line, map, ref, ref1, results;
          map = new SourceLineColumnMap("hi\nthere\nfriend");
          ref = [2, 3, 8, 9, 100];
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            index = ref[i];
            ref1 = map.getLineColumn(index), line = ref1.line, column = ref1.column;
            results.push(assert.eq(index, map.getIndex(line, column), {
              index: index,
              line: line,
              column: column
            }));
          }
          return results;
        });
      }
    }
  });

}).call(this);

//# sourceMappingURL=SourceLineColumnMap.js.map
