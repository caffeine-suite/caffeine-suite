// Generated by CoffeeScript 1.12.7
(function() {
  var CaffeineMc, log;

  CaffeineMc = require('caffeine-mc');

  log = require("art-standard-lib").log;

  module.exports = {
    suite: {
      "default": function() {
        return test("default to compiling with CoffeeScript", function() {
          return assert.match(CaffeineMc.compile("1+2").compiled.js, "Caf.defMod");
        });
      },
      coffeeScript: function() {
        test("|CoffeeScript", function() {
          return assert.eq(CaffeineMc.compile("|CoffeeScript\n1+2"), {
            compiled: {
              js: "(function() {\n  1 + 2;\n\n}).call(this);\n"
            }
          });
        });
        return test("|coffee-script", function() {
          var out;
          out = CaffeineMc.compile("|coffee-script\nglobal._temp = -> 123");
          eval(out.compiled.js);
          return assert.eq(123, global._temp());
        });
      },
      caffeineScript: function() {
        return test(":wordString", function() {
          return assert.eq({
            compiled: {
              js: "\"use strict\"\nlet Caf = require('caffeine-script-runtime');\nCaf.defMod(module, () => {return \"wordString\";});"
            }
          }, CaffeineMc.compile(":wordString"));
        });
      },
      testCompiler: function() {
        test("|CaffeineMc/Test/TestCompiler", function() {
          return assert.eq(CaffeineMc.compile("|CaffeineMc/Test/TestCompiler\nalpha+beta"), {
            compiled: {
              js: "AlphaBeta"
            }
          });
        });
        test("|Test/TestCompiler", function() {
          return assert.eq(CaffeineMc.compile("|Test/TestCompiler\nalpha+beta", {
            sourceDir: __dirname
          }), {
            compiled: {
              js: "AlphaBeta"
            }
          });
        });
        return test("|TestCompiler", function() {
          return assert.eq(CaffeineMc.compile("|TestCompiler\nalpha+beta", {
            sourceDir: __dirname
          }), {
            compiled: {
              js: "AlphaBeta"
            }
          });
        });
      },
      basic: function() {
        test("single-line metaCompiler block", function() {
          var out;
          out = CaffeineMc.compile("|JavaScript\n1+2");
          return assert.eq(out, {
            compiled: {
              js: "1+2"
            }
          });
        });
        test("two single-line metaCompiler blocks", function() {
          var out;
          self.__metaCompilerTest = 123;
          out = CaffeineMc.compile("| self.__metaCompilerTest = 999\n| @compiler = :JavaScript\n1+2");
          assert.eq(out, {
            compiled: {
              js: "1+2"
            }
          });
          return assert.eq(self.__metaCompilerTest, 999);
        });
        test("multi-line metaCompiler block A", function() {
          var out;
          self.__metaCompilerTest = 123;
          out = CaffeineMc.compile("|\n  self.__metaCompilerTest = 456\n  @compiler = :JavaScript\n1+2");
          assert.eq(out, {
            compiled: {
              js: "1+2"
            }
          });
          return assert.eq(self.__metaCompilerTest, 456);
        });
        test("multi-line metaCompiler block B", function() {
          var out;
          self.__metaCompilerTest = 123;
          out = CaffeineMc.compile("|\n  self.__metaCompilerTest = 456\n  @compiler = :JavaScript\n1+2");
          assert.eq(out, {
            compiled: {
              js: "1+2"
            }
          });
          return assert.eq(self.__metaCompilerTest, 456);
        });
        return test("custom compiler", function() {
          var out;
          out = CaffeineMc.compile("| @compiler = compile: (source) => compiled: js: \"\" source: \#{source}\n1+2");
          return assert.eq(out, {
            compiled: {
              js: "source: 1+2"
            }
          });
        });
      },
      options: function() {
        return test("prettier: true", function() {
          var ooo;
          ooo = CaffeineMc.compile(":wordString", {
            prettier: true
          });
          return assert.eq({
            compiled: {
              js: "\"use strict\";\nlet Caf = require(\"caffeine-script-runtime\");\nCaf.defMod(module, () => {\n  return \"wordString\";\n});\n"
            },
            prettier: true
          }, ooo);
        });
      }
    }
  };

}).call(this);
