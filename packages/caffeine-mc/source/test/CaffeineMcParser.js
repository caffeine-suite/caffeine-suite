// Generated by CoffeeScript 1.12.7
(function() {
  var CaffeineMcParser, log;

  CaffeineMcParser = require('caffeine-mc').CaffeineMcParser;

  log = Neptune.Art.StandardLib.log;

  module.exports = {
    suite: {
      noMetaCode: function() {
        test("'hi'", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("hi"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(!!compilerName, false);
          return assert.eq(code, "hi");
        });
        test("multi-line source", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("hi\nthere"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(!!compilerName, false);
          return assert.eq(code, "hi\nthere");
        });
        return test("set compiler-name", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|FooScript\nhi"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(compilerName, "FooScript");
          return assert.eq(code, "hi");
        });
      },
      illegal: function() {
        return test("|AwesomeScript some meta code on one line without column after compiler-name", function() {
          var parser;
          parser = new CaffeineMcParser;
          return assert.throws(function() {
            return parser.parse("|AwesomeScript some meta code on one line without column after compiler-name");
          });
        });
      },
      degenerate: function() {
        test("|", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(!!compilerName, false);
          return assert.eq(code, "");
        });
        test("|AwesomeScript", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|AwesomeScript"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(compilerName, "AwesomeScript");
          return assert.eq(code, "");
        });
        test("|AwesomeScript/SubAwesome", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|AwesomeScript/SubAwesome"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(!!metaCode, false);
          assert.eq(compilerName, "AwesomeScript/SubAwesome");
          return assert.eq(code, "");
        });
        test("| meta code", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("| meta code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(metaCode, "meta code");
          assert.eq(compilerName, void 0);
          return assert.eq(code, "");
        });
        test("|AwesomeScript: meta code", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|AwesomeScript: meta code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(metaCode, "meta code");
          assert.eq(compilerName, "AwesomeScript");
          return assert.eq(code, "");
        });
        return test("|AwesomeScript:\\n  meta code", function() {
          var code, compilerName, metaCode, parser, ref;
          parser = new CaffeineMcParser;
          ref = parser.parse("|AwesomeScript\n meta code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
          assert.eq(metaCode, "meta code");
          assert.eq(compilerName, "AwesomeScript");
          return assert.eq(code, "");
        });
      },
      metaCode: {
        oneLiner: function() {
          test("basic", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("| some meta-code\nhi"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(metaCode, "some meta-code");
            assert.eq(!!compilerName, false);
            return assert.eq(code, "hi");
          });
          return test("with compilerName", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("|BooScript: some meta-code\nhi"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(metaCode, "some meta-code");
            assert.eq(compilerName, "BooScript");
            return assert.eq(code, "hi");
          });
        },
        block: function() {
          test("basic", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("|\n  my meta code\nmy normal code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(code, "my normal code");
            assert.eq(metaCode, "my meta code");
            return assert.eq(compilerName, void 0);
          });
          test("with compilerName", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("|AwesomeScript\n  my meta code\nmy normal code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(code, "my normal code");
            assert.eq(metaCode, "my meta code");
            return assert.eq(compilerName, "AwesomeScript");
          });
          test("with compilerName and optional colon", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("|AwesomeScript:\n  my meta code\nmy normal code"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(code, "my normal code");
            assert.eq(metaCode, "my meta code");
            return assert.eq(compilerName, "AwesomeScript");
          });
          return test("multi lines", function() {
            var code, compilerName, metaCode, parser, ref;
            parser = new CaffeineMcParser;
            ref = parser.parse("|AwesomeScript\n  # comment\n\n  # blank line above\n  some code\n    indented\n      and some more"), metaCode = ref.metaCode, compilerName = ref.compilerName, code = ref.code;
            assert.eq(code, "");
            assert.eq(metaCode, "# comment\n\n# blank line above\nsome code\n  indented\n    and some more");
            return assert.eq(compilerName, "AwesomeScript");
          });
        }
      }
    }
  };

}).call(this);
