// Generated by CoffeeScript 1.12.7
(function() {
  var CaffeineEight, CaffeineMcParser, isFunction, isString, log, lowerCamelCase, merge, present, ref, upperCamelCase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), present = ref.present, isFunction = ref.isFunction, log = ref.log, isString = ref.isString, lowerCamelCase = ref.lowerCamelCase, upperCamelCase = ref.upperCamelCase, merge = ref.merge;

  CaffeineEight = require('caffeine-eight');

  module.exports = CaffeineMcParser = (function(superClass) {
    extend(CaffeineMcParser, superClass);

    function CaffeineMcParser() {
      return CaffeineMcParser.__super__.constructor.apply(this, arguments);
    }

    CaffeineMcParser.rule({
      root: "!oneLinerWithoutColon meta? toEof"
    }, {
      getter: {
        compilerName: function() {
          var ref1, ref2;
          return (ref1 = this.meta) != null ? (ref2 = ref1.compilerName) != null ? ref2.text : void 0 : void 0;
        },
        metaCode: function() {
          var ref1, ref2;
          return (ref1 = this.meta) != null ? (ref2 = ref1.metaCode) != null ? ref2.text : void 0 : void 0;
        },
        code: function() {
          var ref1;
          return ((ref1 = this.toEof) != null ? ref1.text : void 0) || "";
        }
      }
    });

    CaffeineMcParser.rule({
      meta: ["'|' compilerName /\: */ metaCode:toEol end", "'|' / +/ metaCode:toEol end", "'|' compilerName /\: */? metaCode:block end", "'|' metaCode:block end", "'|' compilerName end", "'|'"],
      oneLinerWithoutColon: "'|' compilerName / *[^:\n]/",
      compilerName: /[^:\s]+/i,
      toEof: /(.|\n)*$/,
      toEol: /\S[^\n]*/,
      end: /\n|$/,
      block: CaffeineEight.Extensions.IndentBlocks.getPropsToSubparseBlock({
        rule: "toEof"
      })
    });

    return CaffeineMcParser;

  })(CaffeineEight.Parser);

}).call(this);
