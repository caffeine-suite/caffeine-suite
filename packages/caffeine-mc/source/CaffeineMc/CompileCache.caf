import &StandardImport, &SourceRoots, &moduleResolver, &MockableTempDir, {} &crypto

## NOTES
  cachedFileKey: (object)
    compiler:   (required, object) compiler
    source:     (required, string) source-code
    sourceFile: (required, string) source file path & name
    compilerOptions: (object) all options which affect the generated output

  cachedFileKeyWithCompilerResults: (object)
    all the cachedFileKey fields
    compiled: (required, object) the compiler's results
class CompileCache extends BaseClass
  @compileCacheFileNameRoot: :CaffeineMcCompileCache

  @classGetter
    compileCachePathRoot: -> getTempDir()
    compileCacheFilePathRoot: -> @_compileCacheFilePathRoot ?= path.join @compileCachePathRoot, @compileCacheFileNameRoot

  @compilerSupportsCaching:     (compiler)      -> isString(compiler.version) && @getCompilerName compiler
  @getCompilerName:             (compiler)      -> compiler.getName?() || compiler.name
  @getCompilerSignature:        (compiler)      -> "" #{@getCompilerName compiler}-#{compiler.version}
  @makeSha256FilenameFriendly:  (sha256String)  -> sha256String.replace /[\/+=]/g, "-"

  @hashSource: (source) ->
    @makeSha256FilenameFriendly
      crypto.createHmac :sha256 "" no need for a real secret
      .update source
      .digest :base64
      .split("=")[0]

  ## getFileName
    IN: cachedFileKey (see above)
  @getFileName: (cachedFileKey) ->
    {compiler, source, sourceFile, compilerOptions} = cachedFileKey
    unless compiler && sourceFile && source?
      throw new Error "expecting compiler, source and sourceFile: " + formattedInspect {compiler, source, sourceFile}

    return null unless @compilerSupportsCaching compiler

    sourceRoot = findSourceRootSync sourceFile
    throw new Error "Could not findSourceRootSync for #{sourceFile}" unless sourceRoot
    relativeSourceFile = path.relative sourceRoot, sourceFile

    source =
      """
        # sourceFile: #{relativeSourceFile}
        # compilerOptions: #{consistentJsonStringify compilerOptions ? null}
        #{source}

    []
      @compileCacheFilePathRoot
      path.basename(sourceRoot).replace /\./g :-
      path.basename(sourceFile).replace /\./g :-
      @getCompilerSignature compiler
      @hashSource source
    .join("_") + :.json

  ## cache
    IN: cachedFileKey (see above), but also with {source, compiled and props}
  @cache: (cachedFileKey) ->
    if fileName = @getFileName cachedFileKey
      {source, compiled, props} = cachedFileKey
      log caching: cachedFileKey.sourceFile if cachedFileKey.verbose
      fs.writeFileSync fileName, JSON.stringify merge {source, compiled, props}

    cachedFileKey

  ## fetch
    IN: cachedFileKey (see above)
  @fetch: (cachedFileKey) ->
    start = currentSecond()
    if fileName = @getFileName cachedFileKey
      if fs.existsSync fileName
        if (cacheContents = try JSON.parse fs.readFileSync fileName) &&
            cacheContents.source == cachedFileKey.source &&
            @dependenciesUnchanged cachedFileKey, cacheContents.props

          cacheContents.cached = true
          cacheContents

  @dependenciesUnchanged: (cachedFileKey, props) ->
    !find cachedRequireString, sourceString from props?.moduleDependencies
      findModuleSync sourceString, {} cachedFileKey.sourceFile
      .requireString
      != cachedRequireString

  ## reset
    NOTE: for some reason when using mock-fs, we need to apply (Promise.resolve item) to glob's results
  @reset: (verbose) ->
    glob @compileCacheFilePathRoot + "*"
    .then (list) ->
      Promise.all array item from list
        Promise.resolve item
        .then (item) -> fs.unlink item
        .tap -> log "cache-reset: ".gray + item.green + " (deleted)".gray if verbose
