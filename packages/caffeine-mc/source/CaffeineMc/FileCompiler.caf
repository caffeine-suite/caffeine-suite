import &StandardImport, &SourceRoots
CaffeineMc = require './namespace'

class FileCompiler

  @compileFileSync: (sourceFile, options = {}) ->
    throw new Error "outputDirectory unsupported" if options.outputDirectory

    options extract source, sourceRoot

    sourceRoot =
      if sourceRoot then  path.resolve sourceRoot
      else                findSourceRootSync sourceFile

    {compiler, config} = getCaffeineInitSync sourceRoot
    source ?=
      fs.readFileSync sourceFile
      .toString()

    compiler.compile source, merge config, options, {} sourceFile, sourceRoot

  @compileFile: (sourceFile, options = {})->
    options extract outputDirectory, source, sourceRoot

    result =
      readCount:      0
      writeCount:     0
      unchangedCount:  0
      outputFiles:  []
      output:       null

    # get sourceRoot; also, abort if sourceFile does not exist
    Promise.all []
      if sourceRoot then  path.resolve sourceRoot
      else                findSourceRoot sourceFile

      fs.exists sourceFile
      .then (exists) -> throw new Error "sourceFile not found: #{sourceFile}" unless exists

    .then ([sourceRoot]) ->
      # load caffeineInitFile (if it exists) and load sourceFile
      Promise.all []
        getCaffeineInit sourceRoot
        source ?
          Promise.then -> fs.readFile(sourceFile).then (source) -> source.toString()
          .tap -> result.readCount++

      # compile
      .then ([{compiler, config}, source]) ->
        compiler.compile source, merge config, options, {} sourceFile, sourceRoot

    # write files if outputDirectory was provied
    .then (compilerResult) ->
      {compiled} = result.output = compilerResult
      if outputDirectory
        basename = path.basename sourceFile, path.extname sourceFile
        Promise.all array text, extension from compiled when present text
          result.outputFiles.push outputFilename = path.join outputDirectory, "#{basename}.#{extension}"
          Promise
          .then ->
            fs.readFile outputFilename
            .then (existing) -> existing.toString()
            .catch -> null
          .then (existingData) ->
            if existingData != text
              fs.writeFile outputFilename, text
              .then -> result.writeCount++
            else result.unchangedCount++

    .then -> result
    .catch (e) ->
      log.error "error compiling: #{sourceFile}"
      throw e