import &StandardImport, &@art-suite/SourceRootFinder

caffeineInitFileName = :caffeine-mc.config.caf

caffeineProjectSourceRootFinder = new SourceRootFinder
  indicatorFiles: :package.json :.git caffeineInitFileName

class SourceRoots extends BaseClass

  @classGetter
    :caffeineInits
    :caffeineInitsSync
    sourceRootIndicatorFiles: -> caffeineProjectSourceRootFinder.indicatorFiles
    caffeineInitFileName: -> caffeineInitFileName

  _Metacompiler = null
  newMetacompiler = -> new (_Metacompiler ?= &Metacompiler)

  # TODO - capture and report syntax errors in source better
  evalCapturingModuleExports = (source) ->
    global.__caffeineMcModule = {}
    try
      eval "" (function(module){#{source}})(__caffeineMcModule);

    catch e
      log.error "ERROR evalCapturingModuleExports":
        source: source
        error: e

      throw e

    {exports} = global.__caffeineMcModule || {}
    global.__caffeineMcModule = null
    exports

  # OUT: promise.then (caffeineInit) ->
  #   caffeineInit is a js string or false
  @getCaffeineInit: (sourceRoot = getCwd()) =>
    @caffeineInits[sourceRoot] ?=
      fs.exists sourceFile = path.join sourceRoot, @caffeineInitFileName
      .then (exists) ->
        if exists
          fs.readFile sourceFile
          .then (contents) -> contents.toString()
        else
          Promise.resolve false

        .then (caffeineInitFileContents) ->
          @caffeineInits[sourceRoot] =
            compiler: metacompiler = newMetacompiler()
            config:
              if result = caffeineInitFileContents && metacompiler.compile caffeineInitFileContents, {} sourceFile, sourceRoot
                evalCapturingModuleExports result.compiled.js
              else
                {}

  @getCaffeineInitSync: (sourceRoot) =>
    throw new Error "no sourceRoot" unless sourceRoot
    @caffeineInitsSync[sourceRoot] ?=
      if fs.existsSync sourceFile = path.join sourceRoot, @caffeineInitFileName
        caffeineInitFileContents = fs.readFileSync(sourceFile).toString()

        metacompiler = newMetacompiler()
        result = metacompiler.compile caffeineInitFileContents, {sourceFile, sourceRoot}

        compiler: metacompiler.compiler
        config: evalCapturingModuleExports result.compiled.js

      else
        compiler: newMetacompiler()
        config: {}

  @findSourceRoot:      (directory) -> caffeineProjectSourceRootFinder.findSourceRoot directory
  @findSourceRootSync:  (directory) -> caffeineProjectSourceRootFinder.findSourceRootSync directory

  ######################
  # PRIVATE
  ######################

  # keyed by sourceRoot
  @_caffeineInits: {}
  @_caffeineInitsSync: {}

  # for testing
  @_resetSourceRoots: =>
    @_caffeineInits = {}
    @_caffeineInitsSync = {}
