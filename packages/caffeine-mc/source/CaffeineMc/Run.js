// Generated by CoffeeScript 1.12.7
(function() {
  var BaseClass, CaffeineMc, ErrorWithInfo, Promise, Run, array, clone, compactFlattenAll, defineModule, fileExists, find, formattedInspect, fs, isString, log, merge, path, randomBase62Character, realRequire, ref, upperCamelCase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require('art-standard-lib'), clone = ref.clone, array = ref.array, compactFlattenAll = ref.compactFlattenAll, ErrorWithInfo = ref.ErrorWithInfo, find = ref.find, Promise = ref.Promise, merge = ref.merge, formattedInspect = ref.formattedInspect, log = ref.log, defineModule = ref.defineModule, isString = ref.isString, upperCamelCase = ref.upperCamelCase, randomBase62Character = ref.randomBase62Character;

  BaseClass = require('art-class-system').BaseClass;

  fs = require('fs-extra');

  path = require('path');

  CaffeineMc = require('./namespace');

  realRequire = eval('require');

  fileExists = function(filename) {
    return fs.existsSync(filename) && filename;
  };

  defineModule(module, Run = (function(superClass) {
    var rewriteArgv;

    extend(Run, superClass);

    function Run() {
      return Run.__super__.constructor.apply(this, arguments);
    }

    Run._resolveSourceFile = function(options) {
      var color, e, found, sourceFile;
      sourceFile = options.sourceFile, color = options.color;
      return merge(options, {
        sourceFile: (function() {
          if (fs.existsSync(sourceFile)) {
            return sourceFile;
          } else if ((found = find(realRequire.extensions, function(v, k) {
            return fileExists("" + sourceFile + k);
          }))) {
            return found;
          } else {
            e = new Error("No matching file found: " + (formattedInspect({
              sourceFile: sourceFile,
              extensions: Object.keys(realRequire.extensions).join(' ')
            })));
            e.stack = color ? e.message.red : e.message;
            throw e;
          }
        })()
      });
    };

    rewriteArgv = function(sourceFile, args) {
      process.argvRaw = process.argv;
      return process.argv = compactFlattenAll(sourceFile, args);
    };

    Run.runFile = function(sourceFile, options) {
      var globalCompilerOptions;
      globalCompilerOptions = Neptune.CaffeineMc.globalCompilerOptions;
      try {
        Neptune.CaffeineMc.globalCompilerOptions = options;
        Run.setupNodeForRun(Run._resolveSourceFile(options = merge(options, {
          sourceFile: sourceFile
        })));
        return realRequire(realRequire.main.filename);
      } finally {
        Neptune.CaffeineMc.globalCompilerOptions = globalCompilerOptions;
      }
    };


    /*
    Do all the things NODE needs to make it look like
    we ran the file like "> node souceFile"
     */

    Run.runJs = function(js, options) {
      var main;
      if (options == null) {
        options = {};
      }
      Run.setupNodeForRun(options);
      main = realRequire.main;
      return main._compile(js, main.filename);
    };

    Run.setupNodeForRun = function(options) {
      var main, sourceFile;
      sourceFile = options.sourceFile;
      main = realRequire.main;
      main.filename = sourceFile = sourceFile ? fs.realpathSync(sourceFile) : '<anonymous>';
      rewriteArgv(sourceFile, options.args);
      main.moduleCache && (main.moduleCache = {});
      return main.paths = realRequire('module')._nodeModulePaths(fs.realpathSync(path.dirname(sourceFile || "./anonymous")));
    };

    return Run;

  })(BaseClass));

}).call(this);
