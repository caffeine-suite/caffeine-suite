// Generated by CoffeeScript 1.11.1
(function() {
  var CaffeineMc, Promise, colors, commander, compile, displayError, e, each, escapeRegExp, file, fileToRun, filename, files, filesRead, filesWritten, formattedInspect, fsp, glob, log, output, path, prettier, ref, serializer, verbose, version;

  colors = require("colors");

  glob = require("glob");

  fsp = require('fs-promise');

  path = require('path');

  CaffeineMc = require('caffeine-mc');

  version = require('./package.json').version;

  commander = require("commander").version(version).usage('[options] <input files and directories>').option('-o, --output <directory>', "where to write output files").option('-c, --compile', 'compile files').option('-p, --prettier', 'apply "prettier" to any js output').option('-v, --verbose', 'show more output').on("--help", function() {
    return console.log("An output directory is required if more than one input file is specified.\n\nDefault action, if a file is provided, is to execute it.");
  }).parse(process.argv);

  output = commander.output, compile = commander.compile, prettier = commander.prettier, verbose = commander.verbose;

  displayError = function(e) {
    var escapeRegExp, log, ref;
    ref = Neptune.Art.Foundation, log = ref.log, escapeRegExp = ref.escapeRegExp;
    if (verbose) {
      return log.error(e);
    } else if (e.message.match(/parse|expect/i)) {
      if (e) {
        return log(e.message.replace(/<HERE>/, "<HERE>".red));
      }
    } else {
      return log.error(e.stack.split("\n").slice(0, 30).join("\n").replace(new RegExp(escapeRegExp(process.cwd() + "/"), "g"), './').replace(new RegExp(escapeRegExp(path.dirname(process.cwd()) + "/"), "g"), '../'));
    }
  };

  if (compile) {
    files = commander.args;
    ref = Neptune.Art.Foundation, log = ref.log, Promise = ref.Promise, formattedInspect = ref.formattedInspect, each = ref.each, escapeRegExp = ref.escapeRegExp;
    if (!output && files.length === 1) {
      filename = files[0];
      if (!fsp.statSync(filename).isDirectory()) {
        output = path.dirname(filename);
      }
    }
    if (files.length > 0 && output) {
      verbose && log({
        compile: {
          inputs: files.length === 1 ? files[0] : files,
          output: output
        }
      });
      if (verbose) {
        log("caffeine-mc loaded");
      }
      if (verbose && prettier) {
        log("using prettier");
      }
      serializer = new Promise.Serializer;
      filesRead = 0;
      filesWritten = 0;
      each(files, function(file) {
        return serializer.then(function() {
          return CaffeineMc.compileFile(file, {
            outputDirectory: output,
            prettier: prettier
          }).then(function(arg) {
            var readCount, writeCount;
            readCount = arg.readCount, writeCount = arg.writeCount;
            if (verbose) {
              log("compiled: " + file.green);
            }
            filesRead += readCount;
            return filesWritten += writeCount;
          });
        });
      });
      serializer.then(function() {
        return log({
          success: {
            filesRead: filesRead,
            filesWritten: filesWritten
          }
        });
      });
      serializer["catch"](displayError);
    } else {
      commander.outputHelp();
    }
  } else if (commander.args.length === 1) {
    fileToRun = commander.args[0];
    require('./register');
    file = path.resolve(fileToRun.match(/^(\/|\.)/) ? fileToRun : "./" + fileToRun);
    try {
      require(file);
    } catch (error) {
      e = error;
      displayError(e);
    }
  } else {
    commander.outputHelp();
  }

}).call(this);
