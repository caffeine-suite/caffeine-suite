import &StandardImport, &SourceRoots
CaffeineMc = require './namespace'

class FileCompiler

  @compileFileSync: (sourceFile, options = {}) ->
    throw new Error "outputDirectory unsupported" if options.outputDirectory

    options extract source, sourceRoot

    sourceRoot =
      if sourceRoot then  path.resolve sourceRoot
      else                findSourceRootSync sourceFile

    CaffeineMc.compile
      source ?
        fs.readFileSync sourceFile
        .toString()

      merge options, {} sourceFile, sourceRoot
      getCaffeineInitSync sourceRoot

  @compileFile: (sourceFile, options = {})->
    options extract outputDirectory, source

    findSourceRoot sourceFile
    .then (sourceRoot) ->
      result =
        readCount:    0
        writeCount:   0
        outputFiles:  []
        output:       null

      fs.exists sourceFile
      .then (exists) ->
        throw new Error "sourceFile not found: #{sourceFile}" unless exists
        getCaffeineInit sourceRoot

      .then ({compiler, config}) ->
        Promise
        .then -> source ? fs.readFile(sourceFile).then (source) -> source.toString()
        .then (source) ->

          result.output = compiler.compile source, merge config, options, {} sourceFile, sourceRoot
          result.readCount++

          Promise.all array text, extension from result.output.compiled when present text
            basename = path.basename sourceFile, path.extname sourceFile
            result.outputFiles.push outputFilename

            if outputDirectory
              result.writeCount++
              outputFilename = path.join outputDirectory, "#{basename}.#{extension}"
              fs.writeFile outputFilename, text

            else
              Promise.resolve text

      .then -> result
      .catch (e) ->
        log.error "error compiling: #{sourceFile}"
        throw e