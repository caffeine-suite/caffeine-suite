import &ArtStandardLib, &CaffeineMc, &ArtTestbench, &CaffeineScript, {}
  &mockFs
  &path
  fs: &fsExtra

sourceRootName = "AliceInLove"
sourceRoot = "/home/alice/#{sourceRootName}"
sourcePath = "#{sourceRoot}/source/AliceInLove/Lib"
sourceFileName = "myFile"
sourceFileExtension = "caf"
sourceFile = "#{sourcePath}/#{sourceFileName}.#{sourceFileExtension}"

initialFs =
  "#{sourceRoot}":
    "package.json": "{}"
    source: AliceInLove:
      Lib: "#{sourceFileName}.caf": "&standard_import"
      "StandardImport.caf": ":foo"

describe
  basic: ->
    beforeAll -> mockFs initialFs
    afterAll -> mockFs.restore()

    fakeInfo =
      compiler:
        name: "TestCompiler"
        version: "1.2.3"
      source: "My source code."
      sourceFile: sourceFile
      compiled: js: "console.log('My source code'.);"

    test "getFileName", ->
      fn = CompileCache.getFileName fakeInfo
      assert.match fn, CompileCache.compileCacheFileNameRoot
      assert.match fn, "TestCompiler"
      assert.match fn, sourceRootName
      assert.match fn, sourceFileName
      assert.match fn, sourceFileExtension

    test "cache", ->
      CompileCache.cache fakeInfo

      assert.eq fakeInfo.compiled, CompileCache.fetch(objectWithout fakeInfo, "compiled").compiled

    test "different compilerOptions generates different cache filenames", ->
      assert.neq
        CompileCache.getFileName merge fakeInfo, compilerOptions: {}
        CompileCache.getFileName merge fakeInfo, compilerOptions: transpile: true

    test "compilerOptions with different order still generates same cache filenames", ->
      assert.eq
        CompileCache.getFileName merge fakeInfo, compilerOptions: a: 1, b: 2
        CompileCache.getFileName merge fakeInfo, compilerOptions: b: 2, a: 1

  FileCompiler: ->
    beforeAll ->
      # have to preload caffeineScript because of mockFs
      Metacompiler.CaffeineScript
      mockFs initialFs

    afterAll -> mockFs.restore()

    chainedTest "init" -> WorkingCache.resetWorkingCache()
    .thenTest
      "initial", ->
        FileCompiler.compileFile sourceFile, cache: true
        .then ({output}) ->
          assert.jsFalse output.cached

      "cached", ->
        FileCompiler.compileFile sourceFile, cache: true
        .then ({output}) ->
          assert.true output.cached

      "move moduleDependency triggers recompile", ->
        outputFilename = path.join path.dirname(sourceFile), "StandardImport.caf"
        fs.writeFile outputFilename, ":bar"
        .then ->
          WorkingCache.resetWorkingCache()
          FileCompiler.compileFile sourceFile, cache: true
        .then ({output}) ->
          assert.jsFalse output.cached
